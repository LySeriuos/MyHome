@page "/createEmail"
@page "/createEmail/{currentUserID:int}"
@using MailKit.Net.Smtp
@using MimeKit
@using My_Home.Models

@inject BlazorData.DataService DataService;


<h3>CreateEmail</h3>
@* @bind-Value:after="RealEsatateIdToAddDeviceChanged" *@
<label class="form-label">Choose The Device</label>
<InputSelect @bind-Value="_chosedDeviceID" class="form-select">
    <option selected value="0" disabled>Select Real Estate...</option>
    @foreach (var device in _currentUser.GetAllDevices())
    {
        <option value="@device.DeviceID">@device.DeviceName</option>
    }
</InputSelect>
<p>@_chosedDeviceID</p>
<p>@_produserChecked</p>
<p>@_modelNumberChecked</p>

@if (_chosedDeviceID != 0)
{
    <EditForm Model="_deviceProfile">
        <div class="row w-50 mr-0">
            <div class="col-2 text-start">
                <InputCheckbox id="produser" @bind-Value="_produserChecked">
                </InputCheckbox>
                <label>Device Produser:</label>
            </div>
            <div class="col text-start">
                <p>@_chosedDevice.DeviceProduser</p>
            </div>
        </div>
        <div class="row w-50 mr-0">
            <div class="col-2 text-start">
                <InputCheckbox id="produser" @bind-Value="_serialNumberChecked">
                </InputCheckbox>
                <label>Serial Number:</label>
            </div>
            <div class="col text-start">
                <p>@_chosedDevice.DeviceSerialNumber</p>
            </div>
        </div>
        <div class="row w-50 mr-0">
            <div class="col-2 text-start">
                <InputCheckbox id="modelNumber" @bind-Value="_modelNumberChecked">
                </InputCheckbox>
                <label>Model Number:</label>
            </div>
            <div class="col text-start">
                <p>@_chosedDevice.DeviceModelNumber</p>
            </div>
        </div>
        <div class="row w-50 mr-0">
            <div class="col-2 text-start">
                <InputCheckbox id="shopDate" @bind-Value="_shopDateChecked">
                </InputCheckbox>
                <label>Shop Date:</label>
            </div>
            <div class="col text-start">
                <p>@_chosedDevice.DeviceWarranty.PurchaseDate.ToShortDateString()</p>
            </div>
        </div>
        <div class="row w-50 mr-0">
            <div class="col-2 text-start">
                <InputCheckbox id="reciept" @bind-Value="_chosedDeviceRecieptChecked">
                </InputCheckbox>
                <label>Reciept:</label>
            </div>
            <div class="col text-start">
                <p class="mb-0">@_chosedDevice.DeviceWarranty.ReceiptLink</p>
            </div>
            <div class="col">
                <Button Class="btn-dark btn-sm">Open</Button>
            </div>
        </div>
        <div class="row w-50 mr-0">
            <div class="col-2 text-start">
                <InputCheckbox id="reciept" @bind-Value="_chosedDeviceExtraWarrantyRecieptChecked">
                </InputCheckbox>
                <label>Extra Warranty:</label>
            </div>
            <div class="col text-start">
                <p>@_chosedDevice.DeviceWarranty.ExtraInsuranceWarrantyLink</p>
            </div>
            <div class="col">
                <Button Class="btn-dark btn-sm">Open</Button>
            </div>
        </div>
        <div class="row w-50 mr-0">
            <div class="col-2 text-start">
                <InputCheckbox id="shopAdress" @bind-Value="_chosedDeviceShopAdressChecked">
                </InputCheckbox>
                <label>Shop Adress</label>
            </div>
            <div class="col text-start">
                <p>@_chosedDevice.DeviceWarranty.Shop.Address.StreetName @_chosedDevice.DeviceWarranty.Shop.Address.HouseNumber @_chosedDevice.DeviceWarranty.Shop.Address.City</p>
            </div>
        </div>

    </EditForm>
    <Button Class="btn-dark btn-sm" @onclick="AddDetailsToTheEmailMessage">Create Email Message</Button>

    <EditForm Model="EmailRequest" FormName="EmailForm" OnSubmit="SendEmail">
        <InputText @bind-Value="EmailRequest.To" class="form-control mt-2" placeholder="To" />
        <InputText @bind-Value="EmailRequest.Subject" class="form-control mt-2" placeholder="Subject" />
        <InputText @bind-Value="EmailRequest.Body" class="form-control mt-2" placeholder="Body" />
        <Button Type="ButtonType.Submit" class="btn btn-primary mt-2">Send Email</Button>
    </EditForm>

    <p>
        Dear Sir, Madam,
        On purchase date
        , I made a purchase from your company ‘<span>name of company</span> name of company>’, a for the sum of € (the total amount here). The product does not fulfil all prerequisites to
        be fit for purpose.
        Description of complaint
        Describe why the product is faulty
        X
        X
        Statutory warranty
        I am entitled to a functional product pursuant to legislation. As the product became faulty within the
        warranty period, you are liable for repair or replacement free of charge.
        If free repair or replacement is not possible, I am entitled to termination of the purchase contract and a
        refund of the purchase amount.
        Please send me your response within 7 days of receiving this message.
        With kind regards,
        Your name and signature
    </p>
    <p>@message</p>
}

@code {
    [Parameter]
    public int currentUserID { get; set; }
    [SupplyParameterFromForm(FormName = "EmailForm")]
    public EmailRequest EmailRequest { get; set; } = new();
    private EditContext? editContext;
    private int _chosedDeviceID { get; set; } = new();
    private DeviceProfile _chosedDevice { get; set; } = new();
    private UserProfile _currentUser = new();
    private bool _produserChecked { get; set; }
    private bool _serialNumberChecked { get; set; }
    private bool _modelNumberChecked { get; set; }
    private bool _shopDateChecked { get; set; }
    private bool _chosedDeviceRecieptChecked { get; set; }
    private bool _chosedDeviceExtraWarrantyRecieptChecked { get; set; }
    private bool _warrantyIsValidUntilChecked { get; set; }
    private bool _extraWarrantyIsValidUntilChecked { get; set; }
    private bool _chosedDeviceShopAdressChecked { get; set; }
    private string _producer = "";
    private string _serialNumber = "";
    private string _modelNumber = "";
    private string _shopDate = "";
    private string _recieptLink = "";
    private string _extraWarrantyRecieptLink = "";
    private string _shopAddress = "";
    private string _warrantyIsValidUntil = "";
    private string _extraWarrantyIsValidUntil = "";
    private string message;
    private DeviceProfile _deviceProfile { get; set; } = new();
    private String _createdText { get; set; }
    private List<string> _attachementsForEmail { get; set; } = new();
    private bool _linkedAttachements;

    private void SendEmail()

    {
        try
        {
            var email = new MimeMessage();
            email.From.Add(MailboxAddress.Parse("lola.labadie15@ethereal.email"));
            email.To.Add(MailboxAddress.Parse(EmailRequest.To));
            email.Subject = EmailRequest.Subject;

            var builder = new BodyBuilder();
            builder.HtmlBody = EmailRequest.Body;
            email.Body = builder.ToMessageBody();
            var attachments = new List<MimeEntity>();
            if (_chosedDeviceRecieptChecked && !String.IsNullOrEmpty(_recieptLink))
            {
                // MimeEntity.Load($"{_recieptLink}");
                builder.Attachments.Add($"{_recieptLink}");
            }

            if (_chosedDeviceExtraWarrantyRecieptChecked && !String.IsNullOrEmpty(_extraWarrantyRecieptLink))
            {
                // MimeEntity.Load($"{_extraWarrantyRecieptLink}");
                builder.Attachments.Add($"{_extraWarrantyRecieptLink}");
            }

            email.Body = builder.ToMessageBody();

            using var smtp = new SmtpClient();
            smtp.Connect("smtp.ethereal.email", 587, MailKit.Security.SecureSocketOptions.StartTls);
            smtp.Authenticate("lola.labadie15@ethereal.email", "pXcJDCMXPmZpw1XMfY");
            smtp.Send(email);
            smtp.Disconnect(true);
        } 
        catch
        {

        }
    }




    protected override void OnInitialized()
    {
        _chosedDevice.DeviceWarranty = new();
        _chosedDevice.DeviceWarranty.Shop = new();
        _chosedDevice.DeviceWarranty.Shop.Address = new();
        base.OnInitialized();
    }

    private void AddDetailsToTheEmailMessage()
    {
        if (_produserChecked)
        {
            _producer = _chosedDevice.DeviceProduser;
        }
        if (_serialNumberChecked)
        {
            _serialNumber = _chosedDevice.DeviceSerialNumber;
        }
        if (_modelNumberChecked)
        {
            _modelNumber = _chosedDevice.DeviceModelNumber;
        }

        if (_chosedDeviceRecieptChecked)
        {
            _recieptLink = _chosedDevice.DeviceWarranty.ReceiptLink;
        }

        if(_chosedDeviceExtraWarrantyRecieptChecked)
        {
            _extraWarrantyRecieptLink = _chosedDevice.DeviceWarranty.ExtraInsuranceWarrantyLink; 
        }

        message = $"Dear Sir/Maddam, On {_modelNumber}, I made a purchase from your company {_serialNumber}, a for the sum of € {_producer}.";
    }

    protected override void OnParametersSet()
    {
        if (currentUserID != 0)
        {
            _currentUser = DataService.Users.First(u => u.UserID == currentUserID);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (_chosedDeviceID != 0)
        {
            _chosedDevice = _currentUser.GetAllDevices().First(d => d.DeviceID == _chosedDeviceID);
        }
        base.OnAfterRender(firstRender);
        StateHasChanged();
    }
}
