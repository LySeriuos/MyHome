@* @page "/createEmail" *@
@page "/createEmail/{currentUserID:int}"
@using MailKit.Net.Smtp
@using MimeKit
@using MyHomeBlazorApp.Components.Modals
@using My_Home.Models

@inject BlazorData.DataService DataService;
@inject IJSRuntime JSRuntime

<h3>CreateEmail</h3>
@* @bind-Value:after="RealEsatateIdToAddDeviceChanged" *@
<label class="form-label">Choose The Device</label>
<InputSelect @bind-Value="_chosedDeviceID" @bind-Value:after="init" class="form-select">
    <option selected value="0" disabled>Select Real Estate...</option>
    @foreach (var device in _currentUser.GetAllDevices())
    {
        <option value="@device.DeviceID">@device.DeviceName</option>
    }
</InputSelect>
<p>@_chosedDeviceID</p>

@if (_chosedDeviceID != 0)
{
    <EditForm Model="_deviceProfile">
        <div class="row w-50 mr-0">
            <div class="col-2 text-start">
                <InputCheckbox id="produser" @bind-Value="_produserChecked">
                </InputCheckbox>
                <label>Device Produser:</label>
            </div>
            <div class="col text-start">
                <p>@_chosedDevice.DeviceProduser</p>
            </div>
        </div>
        <div class="row w-50 mr-0">
            <div class="col-2 text-start">
                <InputCheckbox id="serialNumber" @bind-Value="_serialNumberChecked">
                </InputCheckbox>
                <label>Serial Number:</label>
            </div>
            <div class="col text-start">
                <p>@_chosedDevice.DeviceSerialNumber</p>
            </div>
        </div>
        <div class="row w-50 mr-0">
            <div class="col-2 text-start">
                <InputCheckbox id="modelNumber" @bind-Value="_modelNumberChecked">
                </InputCheckbox>
                <label>Model Number:</label>
            </div>
            <div class="col text-start">
                <p>@_chosedDevice.DeviceModelNumber</p>
            </div>
        </div>
        <div class="row w-50 mr-0">
            <div class="col-2 text-start">
                <InputCheckbox id="shopDate" @bind-Value="_shopDateChecked">
                </InputCheckbox>
                <label>Shop Date:</label>
            </div>
            <div class="col text-start">
                <p>@_chosedDevice.DeviceWarranty.PurchaseDate.ToShortDateString()</p>
            </div>
        </div>
        <div class="row w-50 mr-0">
            <div class="col-2 text-start">
                <InputCheckbox id="reciept" @bind-Value="_chosedDeviceRecieptChecked">
                </InputCheckbox>
                <label>Reciept:</label>
            </div>
            <div class="col text-start">
                <p class="mb-0">@receiptFileName</p>
            </div>
            @if (_chosedDevice.DeviceWarranty.ReceiptLink != "")
            {
                <div class="col">
                    <Button Class="btn-dark btn-sm" @onclick="()=>NavigateToWarrantyFile()">Open</Button>
                </div>
            }
        </div>
        <div class="row w-50 mr-0">
            @if (_chosedDevice.DeviceWarranty.ExtraInsuranceWarrantyLink == "")
            {
                <div class="col-2 text-start">
                    <InputCheckbox Disabled id="reciept" @bind-Value="_chosedDeviceExtraWarrantyRecieptChecked" />
                    <label>Extra Warranty:</label>
                </div>
                <div class="col text-start">
                    <p class="mb-0">@extraWarrantyFileName</p>
                </div>
            }
            else
            {
                <div class="col-2 text-start">
                            <InputCheckbox id="reciept" @bind-Value="_chosedDeviceExtraWarrantyRecieptChecked" />
                            <label>Extra Warranty:</label>
                        </div>
                <div class="col text-start">
                    <p class="mb-0">@extraWarrantyFileName</p>
                </div>
                <div class="col">
                    <Button Class="btn-dark btn-sm" @onclick="()=>NavigateToExtraWarrantyFile()">Open</Button>
                </div>
            }

        </div>

        <div class="row w-50 mr-0">
            <div class="col-2 text-start">
                <InputCheckbox id="shopAdress" @bind-Value="_chosedDeviceShopAdressChecked">
                </InputCheckbox>
                <label>Shop Adress</label>
            </div>
            <div class="col text-start">
                <p>@_chosedDevice.DeviceWarranty.Shop.Address.StreetName @_chosedDevice.DeviceWarranty.Shop.Address.HouseNumber @_chosedDevice.DeviceWarranty.Shop.Address.City</p>
            </div>
        </div>

    </EditForm>
    <Button Class="btn-dark btn-sm" @onclick="AddDetailsToTheEmailMessage">Create Email Message</Button>

    <EditForm Model="EmailRequest" FormName="EmailForm" OnSubmit="SendEmail">
        <InputText @bind-Value="EmailRequest.To" class="form-control mt-2" placeholder="To" />
        <InputText @bind-Value="EmailRequest.Subject" class="form-control mt-2" placeholder="Subject" />
        <InputTextArea @bind-Value="EmailRequest.Body" class="form-control mt-2" placeholder="Body" />
        <Button Type="ButtonType.Submit" class="btn btn-primary mt-2">Send Email</Button>
    </EditForm>

    <div>
        <SuccessModal @ref="_refSuccessModal" Title="Email service notification" Text="Your email has been sent!"></SuccessModal>
    </div>
}

@code {
    [Parameter]
    public int currentUserID { get; set; }
    [SupplyParameterFromForm(FormName = "EmailForm")]
    public EmailRequest EmailRequest { get; set; } = new();
    private DeviceProfile _deviceProfile { get; set; } = new();
    private DeviceProfile _chosedDevice { get; set; } = new();
    private UserProfile _currentUser = new();
    private SuccessModal _refSuccessModal = default!;
    private int _chosedDeviceID { get; set; } = new();
    private bool _produserChecked { get; set; }
    private bool _serialNumberChecked { get; set; }
    private bool _modelNumberChecked { get; set; }
    private bool _shopDateChecked { get; set; }
    private bool _chosedDeviceRecieptChecked { get; set; }
    private bool _chosedDeviceExtraWarrantyRecieptChecked { get; set; }
    private bool _warrantyIsValidUntilChecked { get; set; }
    private bool _extraWarrantyIsValidUntilChecked { get; set; }
    private bool _chosedDeviceShopAdressChecked { get; set; }
    private string receiptFileName { get; set; } = "";
    private string extraWarrantyFileName { get; set; } = "";
    private string _producerStringToAdd = "";
    private string _serialNumberStringToAdd = "";
    private string _modelNumberStringToAdd = "";
    private string _shopDateStringToAdd = "";
    private string _recieptLink = "";
    private string _extraWarrantyRecieptLink = "";
    private string _shopAddress = "";
    private string _warrantyIsValidUntil = "";
    private string _extraWarrantyIsValidUntil = "";
    private string _preparedMessage = "";
    private string _exrtraWarrantyFileLinkConfirmation = "";
    private string _receiptFileLinkConfirmation = "";


    private async Task NavigateToExtraWarrantyFile()
    {
        string currentExtraWarrrantyReceiptLink = _chosedDevice.DeviceWarranty.ExtraInsuranceWarrantyLink;
        string fileUrl = DataService.GetFileUrl(currentExtraWarrrantyReceiptLink);
        await JSRuntime.InvokeVoidAsync("open", fileUrl, "_blank");
    }

    private async Task NavigateToWarrantyFile()
    {
        string currentWarrantyReceiptLink = _chosedDevice.DeviceWarranty.ReceiptLink;
        string fileUrl = DataService.GetFileUrl(currentWarrantyReceiptLink);
        await JSRuntime.InvokeVoidAsync("open", fileUrl, "_blank");
    }

    private void SendEmail()

    {
        try
        {
            var email = new MimeMessage();
            email.From.Add(MailboxAddress.Parse("lola.labadie15@ethereal.email"));
            email.To.Add(MailboxAddress.Parse(EmailRequest.To));
            email.Subject = EmailRequest.Subject;
            var builder = new BodyBuilder();
            // builder.HtmlBody = EmailRequest.Body;
            builder.TextBody = EmailRequest.Body;
            var attachments = new List<MimeEntity>();

            if (_chosedDeviceRecieptChecked && !String.IsNullOrEmpty(_recieptLink))
            {
                // MimeEntity.Load($"{_recieptLink}");
                builder.Attachments.Add($"{_recieptLink}");
            }

            if (_chosedDeviceExtraWarrantyRecieptChecked && !String.IsNullOrEmpty(_extraWarrantyRecieptLink))
            {
                // MimeEntity.Load($"{_extraWarrantyRecieptLink}");
                builder.Attachments.Add($"{_extraWarrantyRecieptLink}");
            }
            email.Body = builder.ToMessageBody();
            // EmailRequest.Body = email.Body.ToString();
            using var smtp = new SmtpClient();
            smtp.Connect("smtp.ethereal.email", 587, MailKit.Security.SecureSocketOptions.StartTls);
            smtp.Authenticate("lola.labadie15@ethereal.email", "pXcJDCMXPmZpw1XMfY");
            smtp.Send(email);
            smtp.Disconnect(true);
            _refSuccessModal.OnShowModalClick();
            EmailRequest = new();
            init();
        }
        catch
        {

        }
    }

    private void init()
    {
        _produserChecked = false;
        _serialNumberChecked = false;
        _modelNumberChecked = false;
        _shopDateChecked = false;
        _chosedDeviceRecieptChecked = false;
        _chosedDeviceExtraWarrantyRecieptChecked = false;
        _warrantyIsValidUntilChecked = false;
        _extraWarrantyIsValidUntilChecked = false;
        _chosedDeviceShopAdressChecked = false;
    }

    public string GetFileName(string fileLink)
    {
        int getIndex = fileLink.LastIndexOf('\\');
        string splitedString = fileLink.Remove(0, getIndex + 1);
        string fileName = splitedString;
        return fileName;
    }

    protected override void OnInitialized()
    {
        _chosedDevice.DeviceWarranty = new();
        _chosedDevice.DeviceWarranty.Shop = new();
        _chosedDevice.DeviceWarranty.Shop.Address = new();
        base.OnInitialized();
    }

    private void AddDetailsToTheEmailMessage()
    {
        if (_produserChecked)
        {
            _producerStringToAdd = $"{_chosedDevice.DeviceProduser} [ADD ITEM TYPE HERE].";
        }
        if (_serialNumberChecked)
        {
            _serialNumberStringToAdd = $"Its serial number is {_chosedDevice.DeviceSerialNumber}.";
        }
        if (_modelNumberChecked)
        {
            _modelNumberStringToAdd = $"Its model number is {_chosedDevice.DeviceModelNumber}.";
        }

        if (_chosedDeviceRecieptChecked)
        {
            _recieptLink = _chosedDevice.DeviceWarranty.ReceiptLink;
            _warrantyIsValidUntil = _chosedDevice.DeviceWarranty.WarrantyEnd.ToShortDateString();
            _receiptFileLinkConfirmation = $"The original receipt attached.";
        }

        if (_chosedDeviceExtraWarrantyRecieptChecked)
        {

            _extraWarrantyRecieptLink = _chosedDevice.DeviceWarranty.ExtraInsuranceWarrantyLink;
            _warrantyIsValidUntil = _chosedDevice.DeviceWarranty.WarrantyEnd.ToShortDateString();
            _exrtraWarrantyFileLinkConfirmation = $"The extra warranty/insurance receipt attached.";
        }

        if (_shopDateChecked)
        {
            _shopDateStringToAdd = $"On {_chosedDevice.DeviceWarranty.PurchaseDate.ToShortDateString()},";
        }

        if (_chosedDeviceShopAdressChecked)
        {
            string stringToJoin = $"Bought from {_chosedDevice.DeviceWarranty.Shop.ShopName} at {_chosedDevice.DeviceWarranty.Shop.Address.StreetName}, {_chosedDevice.DeviceWarranty.Shop.Address.HouseNumber}, {_chosedDevice.DeviceWarranty.Shop.Address.City}.";
            // string joinedString = string.Join(",", string)
            _shopAddress = stringToJoin;
        }

        _preparedMessage = $@"Dear Sir/Madam,
    {_shopDateStringToAdd} I made a purchase of {_producerStringToAdd} {_modelNumberStringToAdd} {_serialNumberStringToAdd}
    {_shopAddress} {_receiptFileLinkConfirmation} {_exrtraWarrantyFileLinkConfirmation}
                    The product does not fulfil all prerequisites to be fit for purpose.
                    Product is faulty because:
                    1.
                    2.
                    3.
                    ...
                    As the product became faulty within the warranty or insurance period, you are liable for repair or replacement free of charge.
                    If free repair or replacement is not possible, I am entitled to termination of the purchase contract and a refund of the purchase amount.
                    Please send me your response within 7 days of receiving this message.
                    With kind regards,
                    [YOUR NAME AND SIGNATURE]";
        EmailRequest.Body = _preparedMessage;
    }

    protected override void OnParametersSet()
    {
        if (currentUserID != 0)
        {
            _currentUser = DataService.Users.First(u => u.UserID == currentUserID);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (_chosedDeviceID != 0)
        {
            _chosedDevice = _currentUser.GetAllDevices().First(d => d.DeviceID == _chosedDeviceID);
            receiptFileName = GetFileName(_chosedDevice.DeviceWarranty.ReceiptLink);
            extraWarrantyFileName = GetFileName(_chosedDevice.DeviceWarranty.ExtraInsuranceWarrantyLink);
        }
        base.OnAfterRender(firstRender);
        StateHasChanged();
    }
}
