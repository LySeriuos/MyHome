@page "/mdetails"
@page "/mdetails/{userID}/{deviceID}"


@using MyHome.Models;
@using MyHome;
@using MyHomeBlazorApp.Components.Modals
@using MyHomeBlazorApp.Pages
@inject BlazorData.DataService DataService

<h3>MobileDeviceInfo</h3>

<ModalEditAddDevice @ref="refModalEditAddDevice" CurrentDevice="@CurrentDevice"
                    CurrentUser="@_userProfile"
                    RealEsatateIdToAddDevice="@currentRealEstate.RealEstateID">
                </ModalEditAddDevice>
@* implement here *@
@* <EditForm Model="@CurrentDevice" disabled=@disabled OnSubmit ="HandleSubmit">
    <DataAnnotationsValidator />
    <div class="form-group row">
        <label for="deviceName" class="col-sm-4 col-form-label">
            Name
        </label>
        <div class="col-sm-8">
            <InputText id="deviceName" disabled @bind-Value="CurrentDevice.DeviceName" placeholder="Device Name" />
        </div>
        <ValidationMessage For=@( () => CurrentDevice.DeviceName ) />
    </div>
    <div class="form-group row">
        <label for="deviceProduser" class="col-sm-4 col-form-label">
            Produser
        </label>
        <div class="col-sm-8">
            <InputText id="deviceProduser" @bind-Value="CurrentDevice.DeviceProduser" placeholder="Device Produser" />
        </div>
    </div>
    <div class="form-group row">
        <label for="deviceType" class="col-sm-4 col-form-label">Type</label>
        <div class="col-sm-8">
            <InputSelect id="deviceType" @bind-Value="CurrentDevice.DeviceType" placeholder="Device Type">
                @foreach (var type in Enum.GetValues(typeof(DeviceType)))
                {
                    <option value="@type">@type</option>
                }
            </InputSelect>
        </div>
    </div>
    <div class="form-group row">
        <label for="deviceSerialNumber" class="col-sm-4 col-form-label">
            Serial Number
        </label>
        <div class="col-sm-8">
            <InputText id="deviceSerialNumber" @bind-Value="CurrentDevice.DeviceSerialNumber" placeholder="Device Serial Number" />
        </div>
    </div>
    <div class="form-group row">
        <label for="deviceModelNumber" class="col-sm-4 col-form-label">
            Model Number
        </label>
        <div class="col-sm-8">
            <InputText id="deviceModelNumber" @bind-Value="CurrentDevice.DeviceModelNumber" placeholder="Device Model Number" />
        </div>
    </div>
    <div class="form-group row">
        <label for="deviceIpAddress" class="col-sm-4 col-form-label">
            IP Address
        </label>
        <div class="col-sm-8">
            <InputText id="deviceIpAddress" @bind-Value="CurrentDevice.IpAddress" placeholder="Device Ip Address" />
        </div>
    </div>
    <div class="form-group row">
        <label for="deviceMacAddress" class="col-sm-4 col-form-label">
            Mac Address
        </label>
        <div class="col-sm-8">
            <InputText id="deviceMacAddress" @bind-Value="CurrentDevice.MacAdrress" placeholder="Mac Address" />
        </div>
    </div>
    <div class="form-group row">
        <label for="deviceManualBookLink" class="col-sm-4 col-form-label">
            Manual Link
        </label>
        <div class="col-sm-8">
            <InputText id="deviceManualBookLink" @bind-Value="CurrentDevice.ManualBookLink" placeholder="Device Manual Book Link" />
        </div>
    </div>
   
    <br>    
    @* <Button style="margin:5px" Color="ButtonColor.Primary" @onclick="OnHideModalEditDeviceClick">Close</Button> *@
    
@* </EditForm>  *@ 

@code {
    [Parameter]
    public string deviceID { get; set; }
    [Parameter]
    public string userID { get; set; }
    [Parameter]
    public UserProfile _userProfile { get; set; }
    private DeviceProfile? _chosedDeviceProfile { get; set; }
    [Parameter]
    public DeviceProfile? CurrentDevice { get; set; }
    [Parameter]
    public RealEstate currentRealEstate { get; set; } = new();
    private ModalEditAddDevice? refModalEditAddDevice = default!;
    private bool disabled;
    IQueryable<DeviceProfile> _devicesListAsQueryable;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if(CurrentDevice != null)
            {
                refModalEditAddDevice.OnShowModalEditDeviceClick();

            }
            refModalEditAddDevice.changedDeviceListData += DeviceListDataHasChanged;
        }
        base.OnAfterRender(firstRender);
    }

    private void DeviceListDataHasChanged()
    {
        _devicesListAsQueryable = DataService.CurrentUser.RealEstates.SelectMany(realEstate => realEstate.DevicesProfiles).AsQueryable();
        StateHasChanged();
    }

    private async Task OnShowModalAddNewDevice(UserProfile userProfile, int deviceIDNotString)
    {
        currentRealEstate.RealEstateID = DataService.GetRealEstateByDeviceID(deviceIDNotString);
        CurrentDevice = userProfile.GetAllDevices().FirstOrDefault(d => d.DeviceID == deviceIDNotString);        
        
    }
    protected override async Task OnParametersSetAsync()
    {
        int userIDNoString = Int32.Parse(userID);
        if (userID != String.Empty)
        {            
            _userProfile = DataService.GetUser(userIDNoString);
        }
        int deviceIDNotString = Int32.Parse(deviceID);
        if (deviceID != String.Empty)
        {
            await OnShowModalAddNewDevice(_userProfile, deviceIDNotString);
        }
    }
}
