@inject UserManager<MyHomeBlazorAppUser> UserManager
@inject LogInChosedUser LogInChosedUser
@page "/"
@* @page "/index/{Id}" *@
@using MyHomeBlazorApp.BlazorData
@implements IDisposable

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<Modal @ref="refWarningModal" Title="Warning!" @onclose="ClosedModalEvent">
    <BodyTemplate>
        <p>You are Loged in as:</p>
        <ul>
            <li>
                User: @userToLogIn
            </li>
            <li>
                ID: @userToLogIn.Id
            </li>
        </ul>
        <p>Change to Admin requires Log Out from user and Login as Admin!</p>
        <Button Color="ButtonColor.Primary" @onclick="refWarningModal.HideAsync">Close</Button>
    </BodyTemplate>
</Modal>

@code
{
    [Parameter]
    public string? Id { get; set; }
    EventCallback ClosedModalEvent { get; set; }
    private string? id;
    Modal refWarningModal { get; set; } = default!;
    private MyHomeBlazorAppUser? userToLogIn { get; set; }
    private bool isLoaded;
    public event Action OnChange;

    // void ClickHandler(string userId)
    // {
    //     userToLogIn = UserManager.Users.First(u => u.Id == userId);
    //     refWarningModal.ShowAsync();
    // }
    // protected override void OnParametersSet() => Text = Text ?? "fantastic";
    // private async Task CloseModalEvent()
    // {
    //     isLoaded = true;
    // }
    // protected override async Task OnInitializedAsync()
    // {
    //     // Id = null;
        
    //     await base.OnInitializedAsync();
    // }
    void SetUserParameter(string userId)
    {
        userToLogIn = UserManager.Users.First(u => u.Id == userId);
        refWarningModal.ShowAsync();
    }
    // protected override async Task OnParametersSetAsync()
    // {
    //     //TODO: implement check here if caller is actually admin!
    //     if (Id != null)
    //     {
    //         userToLogIn = UserManager.Users.First(u => u.Id == Id);
            
    //     }
    // }
    protected override void OnInitialized()
    {
       LogInChosedUser.OnChange += SetUserParameter;
    }

    public void Dispose()
    {
        LogInChosedUser.OnChange -= SetUserParameter;
    }
    

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
        
    //     if (Id != null && isLoaded == true)
    //     {
    //         await refWarningModal.ShowAsync();
    //         isLoaded = true;
    //     }
    //     Id = null;
        
    //     await base.OnAfterRenderAsync(firstRender);
    // }
}