@page "/details"

@using Microsoft.AspNetCore.Components.QuickGrid
@using MyHome.Models;
@using MyHomeBlazorApp.BlazorData;
@using MyHome;
@using MyHomeBlazorApp.Pages
@using MyHomeBlazorApp.Components
@using BlazorBootstrap
@inject NavigationManager uriHelper;
@inject BlazorData.DataService DataService;



<h3>Details</h3>

<div class="row">
    <div class="col">
        <Button @onclick="ShowRealEstatesTable">Real Estates Details</Button>
        <Button @onclick="ShowDevicesTable">Devices Details</Button>
        <Button @onclick="ShowWarrantiesTable">Warranties Details</Button>
        <Button @onclick="ShowShopsTable">Shops Details</Button>
    </div>
</div>
<div class="row">
    @if (_showRealEstatesTableVisible)
    {
        <QuickGrid Items="@DataService.RealEstates.AsQueryable()">
            @* Here is "edit" button, but there are two different forms: Real Estate and Address. For logic reason these two should be combined as one editable form*@
            <TemplateColumn>
                <div>
                    <Button @onclick="OnShowModalClick">Edit</Button>
                    <Button>Delete</Button>
                </div>
            </TemplateColumn>
            <PropertyColumn Title="ID" Property="@(r => r.RealEstateID)" Sortable="true" />
            <PropertyColumn Title="Name" Property="@(r => r.RealEstateName)" Sortable="true" />
            <PropertyColumn Title="Street Name" Property="@(r => r.Address.StreetName)" />
            <PropertyColumn Title="House Number" Property="@(r => r.Address.HouseNumber)" />
            <TemplateColumn Title="House Number Extension">
                <NoData Text="@context.Address.HouseNumberExtension"></NoData>
            </TemplateColumn>
            <PropertyColumn Property="@(r => r.Address.City)" Sortable="true" />
            <PropertyColumn Property="@(r => r.Address.Country)" Sortable="true" />
            <PropertyColumn Title="Total Devices" Property="@(r => r.DevicesProfiles.Count())" />
        </QuickGrid>
    }
</div>
<div class="row">
    @if (_showDevicesTableVisible)
    {
        @foreach (RealEstate r in DataService.RealEstates)
        {
            <QuickGrid Items="@DataService.Devices.AsQueryable()">

                @* Here is "edit" button, but there are two different forms: Real Estate and Address. For logic reason these two should be combined as one editable form*@
                <TemplateColumn>
                    <div>
                        <Button>Edit</Button>
                        <Button>Delete</Button>
                    </div>
                </TemplateColumn>
                <TemplateColumn Title="Real Estate ID">
                    <span>@r.RealEstateID</span>
                </TemplateColumn>
                @* how to make output "no data" if user didn't put in details for alomst each part. Some will be   *@
                <PropertyColumn Title="ID" Property="@(d => d.DeviceID)" Sortable="true" />
                <PropertyColumn Title="Name" Property="@(d => d.DeviceName)" Sortable="true" />
                <PropertyColumn Title="Produser" Property="@(d => d.DeviceProduser)" Sortable="true" />
                <PropertyColumn Title="Type" Property="@(d => d.DeviceType)" Sortable="true" />
                <PropertyColumn Title="Serial Number" Property="@(d => d.DeviceSerialNumber)" />
                <PropertyColumn Title="Model Number" Property="@(d => d.DeviceModelNumber)" />
                <PropertyColumn Title="Ip Adrress" Property="@(d => d.IpAddress)" />
                <PropertyColumn Title="Mac Adrress" Property="@(d => d.MacAdrress)" />
                <TemplateColumn Title="Manual">
                    <Button class="btn btn-sm" href="@context.ManualBookLink">Manual</Button>
                </TemplateColumn>
                <PropertyColumn Title="Warranty Expires" Property="@(d => d.DeviceWarranty.WarrantyEnd.ToShortDateString())" Sortable="true" />
            </QuickGrid>
        }
    }
</div>
<div class="row">
    @if (_showWarrantiesTableVisible)
    {
        @foreach (RealEstate r in DataService.RealEstates)
        {
            <QuickGrid Items="@DataService.Devices.AsQueryable()">

                @* Here is "edit" button, but there are two different forms: Real Estate and Address. For logic reason these two should be combined as one editable form*@
                <TemplateColumn>
                    <div>
                        <Button>Edit</Button>
                        <Button>Delete</Button>
                    </div>
                </TemplateColumn>
                <TemplateColumn Title="Real Estate ID">
                    <span>@r.RealEstateID</span>
                </TemplateColumn>
                @* how to make output "no data" if user didn't put in details for alomst each part. Some will be *@
                <PropertyColumn Title="Device ID" Property="@(d => d.DeviceID)" Sortable="true" />
                <PropertyColumn Title="Purchase Date" Property="@(d => d.DeviceWarranty.PurchaseDate.ToShortDateString())" Sortable="true" />
                <PropertyColumn Title="Warranty Expires" Property="@(d => d.DeviceWarranty.WarrantyEnd.ToShortDateString())" Sortable="true" />
                <PropertyColumn Title="Warranty Length (Days)" Property="@(d => d.DeviceWarranty.WarrantyPeriod.TotalDays)" />
                @* it would be great for user to uppload the receipts or insurances to database to make it easy to find! Other method it could be linked in the user device *@
                <TemplateColumn Title="Receipt">
                    <Button class="btn btn-sm" href="@context.DeviceWarranty.ReceiptLink">Receipt</Button>
                </TemplateColumn>
                <PropertyColumn Title="Extra Warranty/Insurance Length (Days)" Property="@(d => d.DeviceWarranty.ExtraInsuranceWarrantyLenght.TotalDays)" Sortable="true" />
                @* maybe I should separate extended warranty and insurance because it is easier to track and to see what is valid *@
                <TemplateColumn Title="Extended Warranty/Insurance Receipt">
                    <Button class="btn btn-sm" href="@context.DeviceWarranty.ReceiptLink">Extended Warranty/Insurance Receipt</Button>
                </TemplateColumn>
            </QuickGrid>
        }

    }
</div>
<div class="row">
    @if (_showShopsTableVisible)
    {

        @foreach (RealEstate r in DataService.RealEstates)
        {
            <QuickGrid tabindex="2" Items="@DataService.Devices.AsQueryable()">

                @* Here is "edit" button, but there are two different forms: Real Estate and Address. For logic reason these two should be combined as one editable form*@
                <TemplateColumn>
                    <div>
                        <Button>Edit</Button>
                        <Button>Delete</Button>
                    </div>
                </TemplateColumn>
                <TemplateColumn Title="Real Estate ID">
                    <span>@r.RealEstateID</span>
                </TemplateColumn>
                @* how to make output "no data" if user didn't put in details for alomst each part. Some will be *@
                <PropertyColumn Title="Device ID" Property="@(d => d.DeviceID)" Sortable="true" />
                <PropertyColumn Title="Shop Name" Property="@(d => d.DeviceWarranty.Shop.ShopName)" Sortable="true" />
                <PropertyColumn Title="Website Adrress" Property="@(d => d.DeviceWarranty.Shop.ShopWebAddress)" Sortable="true" />
                <PropertyColumn Title="Phone Number" Property="@(d => d.DeviceWarranty.Shop.PhoneNumber)" />
                <PropertyColumn Title="Street Name" Property="@(d => d.DeviceWarranty.Shop.Address.StreetName)" />
                <PropertyColumn Title="House Number" Property="@(d => d.DeviceWarranty.Shop.Address.HouseNumber)" />
                <PropertyColumn Title="Extended House Number/Letter" Property="@(d => d.DeviceWarranty.Shop.Address.HouseNumberExtension)" />
                <PropertyColumn Title="City" Property="@(d => d.DeviceWarranty.Shop.Address.City)" Sortable="true" />
                <PropertyColumn Title="Country" Property="@(d => d.DeviceWarranty.Shop.Address.Country)" Sortable="true" />
            </QuickGrid>
        }

    }


    <div class="row">
        <Modal @ref="modal" Title="Edit Real Estate Address">
            <BodyTemplate>
                <EditForm Model="DataService.RealEstates">
                    <div class="form-group row">
                        <label for="realEstateName" class="col-sm-2 col-form-label">
                            Real Estate Name
                        </label>
                        <div class="col-sm-10">
                            <InputText id="realEstateName" class="form-control" placeholder="Real Estate Name"
                                       @bind-Value="DataService.CurrentRealEstate.RealEstateName" />
                        </div>
                    </div>
                </EditForm>
                <AddressComponent CurrentObject="@GetCurrentRealEstate()"
                                  ForAndIdStreetName="streetName"
                                  LabelPlaceHolderStreetName="Street Name"
                                  ForAndIdHouseNumber="houseNumber"
                                  LabelPlaceHolderHouseNumber="House Number"
                                  ForAndIdHouseNumberExtension="houseNumberExtension"
                                  LabelPlaceHolderHouseNumberExtension="House Number Extension"
                                  ForAndIdCity="city"
                                  LabelPlaceHolderCity="City"
                                  ForAndIdCountry="country"
                                  LabelPlaceHolderCountry="Country" />
            </BodyTemplate>
            <FooterTemplate>
                <Button Color="ButtonColor.Primary" @onclick="OnHideModalClick">Close</Button>
                <Button Color="ButtonColor.Primary">Save changes</Button>
            </FooterTemplate>
        </Modal>
    </div>
</div>


@code {
    private RealEstate realEstate;

    private RealEstate GetCurrentRealEstate()
    {
        realEstate = DataService.CurrentRealEstate;
        return realEstate;
    }


    bool _showRealEstatesTableVisible = true;
    bool _showDevicesTableVisible = false;
    bool _showWarrantiesTableVisible = false;
    bool _showShopsTableVisible = false;

    private void ShowRealEstatesTable()
    {
        _showRealEstatesTableVisible = !_showRealEstatesTableVisible;
        _showDevicesTableVisible = false;
        _showWarrantiesTableVisible = false;
        _showShopsTableVisible = false;
    }
    private void ShowDevicesTable()
    {
        _showDevicesTableVisible = !_showDevicesTableVisible;
        _showWarrantiesTableVisible = false;
        _showShopsTableVisible = false;
        _showRealEstatesTableVisible = false;
    }
    private void ShowWarrantiesTable()
    {
        _showWarrantiesTableVisible = !_showWarrantiesTableVisible;
        _showShopsTableVisible = false;
        _showRealEstatesTableVisible = false;
        _showDevicesTableVisible = false;
    }
    private void ShowShopsTable()
    {
        _showShopsTableVisible = !_showShopsTableVisible;
        _showRealEstatesTableVisible = false;
        _showDevicesTableVisible = false;
        _showWarrantiesTableVisible = false;
    }

    private Modal modal = default!;

    private async Task OnShowModalClick()
    {
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }

}
