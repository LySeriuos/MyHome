@page "/details/{Tab:int}"
@page "/details"


@using Microsoft.AspNetCore.Components.QuickGrid
@using MyHome.Models;
@using MyHomeBlazorApp.BlazorData;
@using MyHome;
@using MyHomeBlazorApp.Pages
@using BlazorBootstrap
@using MyHomeBlazorApp.Components
@using MyHomeBlazorApp.Components.TabComponents
@using MyHomeBlazorApp.Shared
@using System.ComponentModel.DataAnnotations
@inject NavigationManager uriHelper;
@inject BlazorData.DataService DataService;





<h3>Details</h3>


<TabControl>
    @* itemref="@_tabControl" *@
    @* itemref="@_realEstatePage" *@
    <TabPage Text="Real Estates">
        <div class="grid">
            <Button Class="btn btn-outline-success" @onclick="OnShowModalAddNewRealEstate">Add New</Button>
            <QuickGrid tabindex="1" Items="@DataService.RealEstates.AsQueryable()">
                <TemplateColumn>
                    <div>
                        <Button Class="btn btn-outline-dark" @onclick="() => OnShowModalRealEstateClick(context.RealEstateID)">Edit</Button>
                        <Button Class="btn btn-outline-danger" @onclick="() => OnShowModalChooseOptionDeleteRealEstate(context.RealEstateID)">Delete</Button>
                    </div>
                </TemplateColumn>
                <PropertyColumn Title="ID" Property="@(r => r.RealEstateID)" Sortable="true" />
                <PropertyColumn Title="Name" Property="@(r => r.RealEstateName)" Sortable="true" />
                <PropertyColumn Title="Street Name" Property="@(r => r.Address.StreetName)" />
                <PropertyColumn Title="House Number" Property="@(r => r.Address.HouseNumber)" />
                <TemplateColumn Title="Number's Extension">
                    <NoData Text="@context.Address.HouseNumberExtension"></NoData>
                </TemplateColumn>
                <PropertyColumn Property="@(r => r.Address.City)" Sortable="true" />
                <PropertyColumn Property="@(r => r.Address.Country)" Sortable="true" />
                <PropertyColumn Title="Total Devices" Property="@(r => r.DevicesProfiles.Count())" />
            </QuickGrid>
        </div>
    </TabPage>
    <TabPage Text="Devices">
        <div class="grid">
            <Button Class="btn btn-outline-success" @onclick="OnShowModalAddNewDevice">Add New</Button>
            <QuickGrid tabindex="2" Items="DataService.CurrentUser.RealEstates.SelectMany(realEstate => realEstate.DevicesProfiles).AsQueryable()">
                @* Here is "edit" button, but there are two different forms: Real Estate and Address. For logic reason these two should be combined as one editable form*@
                <TemplateColumn>
                    <div>
                        <Button Class="btn btn-outline-dark" @onclick="() => OnShowModalEditDeviceClick(context.DeviceID)">Edit</Button>
                        <Button Class="btn btn-outline-danger" @onclick="() => OnShowModalDeleteDeviceClick(context.DeviceID)">Delete</Button>
                    </div>
                </TemplateColumn>
                <TemplateColumn Title="Real Estate ID">
                    @if (DataService.GetRealEstateByDeviceID(context.DeviceID) != 0)
                    {
                        <span>@DataService.GetRealEstateByDeviceID(context.DeviceID)</span>
                    }
                </TemplateColumn>
                <PropertyColumn Title="ID" Property="@(d=>d.DeviceID)" Sortable="true" />
                <PropertyColumn Title="Name" Property="@(d => d.DeviceName)" Sortable="true" />
                <PropertyColumn Title="Produser" Property="@(d => d.DeviceProduser)" Sortable="true" />
                <PropertyColumn Title="Type" Property="@(d => d.DeviceType)" Sortable="true" />
                <PropertyColumn Title="Serial Number" Property="@(d => d.DeviceSerialNumber)" />
                <PropertyColumn Title="Model Number" Property="@(d => d.DeviceModelNumber)" />
                <PropertyColumn Title="IP Address" Property="@(d => d.IpAddress)" />
                <PropertyColumn Title="Mac Address" Property="@(d => d.MacAdrress)" />
                <TemplateColumn Title="Manual">
                    <Button class="btn btn-sm" href="@context.ManualBookLink">Manual</Button>
                </TemplateColumn>
                @* I do not knowif I need this linein devices details *@
                @* <PropertyColumn Title="Warranty Expires" Property="@(d => d.DeviceWarranty.WarrantyEnd.ToShortDateString())" Sortable="true" /> *@
            </QuickGrid>
        </div>
    </TabPage>
    <TabPage Text="Devices Warranties">
        <div class="grid">
            <QuickGrid tabindex="3" Items="@DataService.CurrentUser.RealEstates.SelectMany(realEstate => realEstate.DevicesProfiles).AsQueryable()">
                @* Here is "edit" button, but there are two different forms: Real Estate and Address. For logic reason these two should be combined as one editable form*@
                <TemplateColumn>
                    <div>
                        <Button Class="btn btn-outline-dark" @onclick="() => OnShowModalEditAddDeviceWarrantyClick(context.DeviceID)">Edit</Button>
                        <Button Class="btn btn-outline-danger">Delete</Button>
                    </div>
                </TemplateColumn>
                <TemplateColumn Title="Real Estate ID">
                    <span>@DataService.GetRealEstateByDeviceID(context.DeviceID)</span>
                </TemplateColumn>
                @* how to make output "no data" if user didn't put in details for alomst each part. Some will be *@
                <PropertyColumn Title="Device ID" Property="@(d => d.DeviceID)" Sortable="true" />
                <PropertyColumn Title="Purchase Date" Property="@(d => d.DeviceWarranty.PurchaseDate.ToShortDateString())" Sortable="true" />
                <PropertyColumn Title="Expires" Property="@(d => d.DeviceWarranty.WarrantyEnd.ToShortDateString())" Sortable="true" />
                <PropertyColumn Title="Length" Property="@(d => d.DeviceWarranty.Years)" />
                @* it would be great for user to uppload the receipts or insurances to database to make it easy to find! Other method it could be linked in the user device *@
                <TemplateColumn Title="Receipt">
                    <Button class="btn btn-sm" href="@context.DeviceWarranty.ReceiptLink">Receipt</Button>
                </TemplateColumn>
                <PropertyColumn Title="Extra Warranty Length" Property="@(d => d.DeviceWarranty.ExtendedWarrantyinYears)" Sortable="true" />
                @* maybe I should separate extended warranty and insurance because it is easier to track and to see what is valid *@
                <TemplateColumn Title="Extra's Receipt">
                    <Button class="btn btn-outline-info" href="@context.DeviceWarranty.ReceiptLink">Open Receipt</Button>
                </TemplateColumn>
            </QuickGrid>
        </div>
    </TabPage>
    <TabPage Text="Shops Details">
        <div class="grid">
            <QuickGrid tabindex="4" Items="@DataService.CurrentUser.RealEstates.SelectMany(realEstate => realEstate.DevicesProfiles).AsQueryable()">
                @* Here is "edit" button, but there are two different forms: Real Estate and Address. For logic reason these two should be combined as one editable form*@
                <TemplateColumn>
                    <div>
                        <Button Class="btn btn-outline-dark" @onclick="() => OnShowModalEditAddShopClick(context.DeviceID)">Edit</Button>
                        <Button Class="btn btn-outline-danger">Delete</Button>
                    </div>
                </TemplateColumn>
                <TemplateColumn Title="Real Estate ID">
                    <span>@DataService.GetRealEstateByDeviceID(context.DeviceID)</span>
                </TemplateColumn>
                @* how to make output "no data" if user didn't put in details for alomst each part. Some will be empty *@
                <PropertyColumn Title="Device ID" Property="@(d => d.DeviceID)" Sortable="true" />
                <PropertyColumn Title="Shop Name" Property="@(d => d.DeviceWarranty.Shop.ShopName)" Sortable="true" />
                <PropertyColumn Title="Website Adrress" Property="@(d => d.DeviceWarranty.Shop.ShopWebAddress)" Sortable="true" />
                <PropertyColumn Title="Phone Number" Property="@(d => d.DeviceWarranty.Shop.PhoneNumber)" />
                <PropertyColumn Title="Street Name" Property="@(d => d.DeviceWarranty.Shop.Address.StreetName)" />
                <PropertyColumn Title="House Number" Property="@(d => d.DeviceWarranty.Shop.Address.HouseNumber)" />
                <PropertyColumn Title="Number Extension" Property="@(d => d.DeviceWarranty.Shop.Address.HouseNumberExtension)" />
                <PropertyColumn Title="City" Property="@(d => d.DeviceWarranty.Shop.Address.City)" Sortable="true" />
                <PropertyColumn Title="Country" Property="@(d => d.DeviceWarranty.Shop.Address.Country)" Sortable="true" />
            </QuickGrid>
        </div>
    </TabPage>

</TabControl>

<!--#region Edit Form Modals  -->
@* Here is the EditForm with button outside the form *@
<div class="row">
    <Modal @ref="modalRealEstate" Title="Edit Real Estate Details">
        <BodyTemplate>
            <EditForm id="realEstateForm123" method="get" Model="DataService.RealEstates.AsQueryable()" OnValidSubmit="@ValidRealEsatateFormSubmitted" OnInvalidSubmit="@InvalidRealEstateFormSubmitted">
                <DataAnnotationsValidator />
                <div class="form-group row">
                    <label for="realEstateName" class="col-sm-2 col-form-label">
                        Real Estate Name
                    </label>
                    <div class="col-sm-10">
                        <InputText id="realEstateName" class="form-control" placeholder="Real Estate Name"
                                   @bind-Value="currentRealEstate.RealEstateName" />
                    </div>
                </div>
                <AddressComponent CurrentObjectAddress="@currentRealEstateAddress" DisplaySubmitButton="false" />
                @if (CheckIfRealEstateObjectIsEmpty() == false)
                {
                    <Button Color="ButtonColor.Primary" @onclick="OnModalRealEstatePreviuos">Previuos</Button>
                }
                @if (currentRealEstate.RealEstateID != DataService.RealEstates.Last()?.RealEstateID)
                {
                    <Button Color="ButtonColor.Primary" @onclick="OnModalRealEstateNext">Next</Button>
                }
                }
                <Button Color="ButtonColor.Primary" @onclick="OnHideModalRealEstateClick">Close</Button>
                @* The button to submit/update form *@
                <Button form="realEstateForm123" Color="ButtonColor.Primary" Type="ButtonType.Submit">Save changes</Button>
            </EditForm>
        </BodyTemplate>
        <FooterTemplate>
            @* This is just for test purposes *@
            @if (LastSubmitResult != null)
            {
                <h2>
                    Last submit status: @LastSubmitResult
                </h2>
            }
        </FooterTemplate>
    </Modal>
</div>
<div class="row">
    @* Maybe it is good to do two separate modals, one for new device and other for device editing *@
    <Modal @ref="modalEditAddDevice" Title="Edit Device Details">
        <BodyTemplate>

            <EditForm Model="realEstateToAddDevice" OnSubmit="@ValidDeviceFormSubmitted">
                <DataAnnotationsValidator />
                <AddEditDeviceComponent Device="@currentDevice" EditContext="@editDeviceContext"/>
                @* @if (currentDevice == null || currentDevice.DeviceID == 0)
                { *@
                <div class="row">
                    <div class="form-group">
                        <label class="form-label">Choose Real Estate</label>
                        <InputSelect @bind-Value="realEstateToAddDevice.RealEstateID" class="form-select">
                            <option selected disabled value="-1">Select Real Estate...</option>
                            @foreach (var realEstate in currentUser.RealEstates)
                            {
                                <option value="@realEstate.RealEstateID">@realEstate.RealEstateName</option>
                            }
                        </InputSelect>
                        <ValidationSummary />
                        @* <ValidationMessage For="() =>realEstateToAddDevice.RealEstateID" class="text-danger d-block" /> *@
                    </div>
                </div>
                <p>@realEstateToAddDevice.RealEstateID</p>
                <p>@SelectedRealEstateID</p>

                <br>
                @*  }
                else
                { *@
                <NextPreviuosButtons currentDevice="@currentDevice" OnModalDevicePreviuos="OnModalDevicePreviuos" OnModalDeviceNext="OnModalDeviceNext"></NextPreviuosButtons>
                @* } *@
                <Button style="margin:5px" Color="ButtonColor.Primary" @onclick="OnHideModalEditDeviceClick">Close</Button>
                <Button Color="ButtonColor.Primary" Type="ButtonType.Submit">Save changes</Button>
            </EditForm>
        </BodyTemplate>
    </Modal>
</div>
<div class="row">
    @* Maybe it is good to do two separate modals, one for new device and other for device editing
    <Modal @ref="modalEditAddDeviceWarranty" Title="Edit Warranty Details">
    <BodyTemplate>
    <EditForm Model="@currentDevice" OnValidSubmit="ValidWarrantyDetailsFormSubmitted" OnInvalidSubmit="InvalidWarrantyDetailsFormSubmitted">
    <AddEditWarrantyDetails CurrentDevice="@currentDevice"></AddEditWarrantyDetails>
    <NextPreviuosButtons currentDevice="@currentDevice" OnModalDevicePreviuos="OnModalDevicePreviuos" OnModalDeviceNext="OnModalDeviceNext"></NextPreviuosButtons>
    <Button Color="ButtonColor.Primary" @onclick="OnHideModalEditAddDeviceWarrantyClick">Close</Button>
    <Button Color="ButtonColor.Primary" Type="ButtonType.Submit">Save changes</Button>
    </EditForm>
    </BodyTemplate>
    </Modal>
    </div>
    <div class="row">
    @* Maybe it is good to do two separate modals, one for new device and other for device editing *@
    <Modal @ref="modalEditAddShopDetails" Title="Edit Shop Details">
        <BodyTemplate>
            <EditForm Model="@currentDevice" Context="ShopDetails" OnValidSubmit="ValidShopDetailsFormSubmitted" OnInvalidSubmit="InvalidShopDetailsFormSubmitted">
                <AddEditShopDetailsComponent CurrentDevice="@currentDevice" />
                <AddressComponent DisplaySubmitButton="false" CurrentObjectAddress="@shopAddress" />
                <NextPreviuosButtons currentDevice="@currentDevice" OnModalDevicePreviuos="OnModalDevicePreviuos" OnModalDeviceNext="OnModalDeviceNext"></NextPreviuosButtons>
                <Button Color="ButtonColor.Primary" @onclick="OnHideModalEditAddShopClick">Close</Button>
                <Button Color="ButtonColor.Primary" Type="ButtonType.Submit">Save changes</Button>
            </EditForm>
        </BodyTemplate>
    </Modal>
</div>
<div>
    <Modal @ref="modalRealEstateDelete" Title="Delete Confirm" ShowCloseButton>
        <BodyTemplate>
            <p class="text-danger">Attention! If you will delete this RealEsatate it´s devices will be removed too!</p>
            <p>Are you sure you want to delete @currentRealEstate.RealEstateName together with Devices?</p>
        </BodyTemplate>
        <FooterTemplate>
            <Button @onclick="()=> OnShowModalReasignDevices(currentRealEstate.RealEstateID)">Delete Only Real Estate</Button>
            <Button @onclick="()=> DeleteRealEstate_Click(true)">Delete With Devices</Button>
            <Button @onclick="()=> OnHideModalDeleteRealEstateCloseClick()">Cancel</Button>
        </FooterTemplate>
    </Modal>
</div>
<div>
    <Modal @ref="modalReasignDevices" Title="Devices Reassigning">
        <BodyTemplate>
            <div>
                <div class="row">
                    <ul>
                        <li>
                            This option will let you move all devices from removed Real Estate to another.
                        </li>
                    </ul>
                    <p>Choose Real Estate to move your devices:</p>
                </div>
                <div class="row">
                    <select class="form-control form-select" @bind="@SelectedRealEstateID">
                        <Button data-toggle="dropdown"></Button>
                        <option selected disabled value="-1">@_chooseOptionValue</option>
                        @foreach (RealEstate r in currentUser.RealEstates)
                        {
                            if (r.RealEstateID != currentRealEstate.RealEstateID && r.RealEstateID != 0)
                            {
                                <option value="@r.RealEstateID"> @r.RealEstateName </option>
                            }
                            else
                            {
                                continue;
                            }
                        }

                    </select>
                </div>
                <div class="row">
                    @if (currentUser.RealEstates.Count > 1)
                    {
                        <Button @onclick="()=>MoveDevicesListToOtherRealEstate(SelectedRealEstateID, currentRealEstate)">Move Devices</Button>
                    }
                    else
                    {
                        <Button Disabled>Move Devices</Button>
                    }
                </div>
                <br />
                <div class="row">
                    <ul>
                        <li>
                            This option will let you leave unassignded devices and move them later to any Real Estate you have.
                        </li>
                    </ul>
                </div>
                <div class="row">
                    <Button @onclick="()=>LeaveDevicesUnassigned(currentRealEstate)">Keep Devices Unassigned</Button>
                </div>
                <br />
                <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                    <Button @onclick="OnHideModalReasignDevicesClick">Cancel</Button>
                </div>
            </div>
        </BodyTemplate>
    </Modal>
</div>
<div>
    <Modal @ref="modalDeviceDelete">
        <BodyTemplate>
            <p>Are you sure you want To Delete @currentDevice.DeviceName?</p>
        </BodyTemplate>
        <FooterTemplate>
            <Button @onclick="()=>DeleteDevice_Click(true)">Delete</Button>
            <Button @onclick="()=>DeleteDevice_Click(false)">Cancel</Button>
        </FooterTemplate>
    </Modal>
</div>

<Button @onclick="SortByID">DANGER</Button>


<!--#endregion -->
@code {

    [Parameter]
    public int Tab { get; set; }

    [Parameter]
    [Required]
    public int SelectedRealEstateID
    {
        get => selectedRealEstateID;
        set { selectedRealEstateID = value; }
    }
    private string _chooseOptionValue = "Choose Real Estate";
    RealEstate currentChosedRealEsate = new();
    private int selectedRealEstateID = -1;
    private Address currentRealEstateAddress = new();
    public DeviceProfile? currentDevice { get; set; } = new();
    private RealEstate currentRealEstate = new();
    private UserProfile currentUser = new();
    private Address shopAddress = new();
    string LastSubmitResult = "";
    string _modalTitle = "";
    bool _isNullOrHasNoProperties = false;
    IQueryable<DeviceProfile> _testItems;
    TabControl _tabControl;
    TabPage _realEstatePage;
    EditContext editContext;
    EditContext editDeviceContext;
    bool valid;
    bool validRealEstate;
    bool validDevice;



    private RealEstate realEstateToAddDevice { get; set; } = new();
    private DeviceProfile deviceToAdd { get; set; } = new();
    public int realEsatateIdToAddDevice
    {
        get => realEstateToAddDevice.RealEstateID;
        set { realEstateToAddDevice.RealEstateID = value; }
    }

    public string deviceName
    {
        get => currentDevice.DeviceName;
        set { currentDevice.DeviceName = value; }
    }

    void ValidDeviceFormSubmitted(EditContext editContext)
    {
        validRealEstate = editContext.Validate();
        validDevice = editDeviceContext.Validate();
        if (realEstateToAddDevice.RealEstateID != 0 && currentDevice.DeviceID == 0 && deviceName != null)
        {
            validDevice = editDeviceContext.Validate();
            validRealEstate = editContext.Validate();
            DataService.AddNewDevice(currentDevice, realEsatateIdToAddDevice);
            modalEditAddDevice.HideAsync();
        }
        else if (realEstateToAddDevice.RealEstateID != 0 && currentDevice.DeviceID != 0 && deviceName != null)
        {
            validDevice = editDeviceContext.Validate();
            validRealEstate = editContext.Validate();
            DataService.MoveDeviceToOtherRealEstate(currentDevice.DeviceID, currentUser, realEsatateIdToAddDevice);
            modalEditAddDevice.HideAsync();
        }
    }



    #region Real Estate

    private Modal modalRealEstate = default!;
    private Modal modalRealEstateDelete = default!;
    //example
    void SortByID()
    {
        _testItems = _testItems.OrderBy(i => i.DeviceID);
    }
    void FilterDevices(string query)
    {
        _testItems = _testItems.Where(i => i.DeviceName.Contains(query));
    }

    private async Task OnShowModalRealEstateClick(int realEstateID)
    {
        currentRealEstate = DataService.GetRealEstate(realEstateID);
        currentRealEstateAddress = currentRealEstate.Address;
        await modalRealEstate.ShowAsync();
    }

    private async Task OnShowModalAddNewRealEstate()
    {
        currentRealEstate = new();
        currentRealEstateAddress = new();
        await modalRealEstate.ShowAsync();
    }

    private async Task OnHideModalRealEstateClick()
    {
        await modalRealEstate.HideAsync();
    }

    private async Task DeleteRealEstate_Click(bool _confirmDeletion)
    {
        if (_confirmDeletion == true)
        {
            //cuold be passed directly in to method to avoid unneseccary code

            DataService.RemoveRealEstate(currentRealEstate.RealEstateID);

            // if (realEstateToDelete == null)
            // {
            //     return;
            // }
            // else
            // {
            //     DataService.RemoveRealEstate(realEstateToDelete.RealEstateID);
            // }
        }
        await OnHideModalDeleteRealEstateCloseClick();
    }

    private async Task OnHideModalDeleteRealEstateCloseClick()
    {
        await modalRealEstateDelete.HideAsync();
    }

    private async Task OnShowModalChooseOptionDeleteRealEstate(int currentRealEstateID)
    {
        currentUser = DataService.CurrentUser;
        currentRealEstate = DataService.GetRealEstate(currentRealEstateID);
        await modalRealEstateDelete.ShowAsync();
    }

    private bool CheckIfRealEstateObjectIsEmpty()
    {
        if (currentRealEstate == null || currentRealEstate.RealEstateID == 0)
        {
            _isNullOrHasNoProperties = true;
        }
        else
        {
            _isNullOrHasNoProperties = false;
        }

        return _isNullOrHasNoProperties;
    }

    private void OnModalRealEstateNext()
    {
        // currentRealEstate = DataService.GetRealEstate(currentRealEstate.RealEstateID);
        // error, doesn't work if IDs is not continiuos number, need to fix it.
        if (currentRealEstate != null)
        {
            currentRealEstate = DataService.RealEstates.First(r => r.RealEstateID == currentRealEstate.RealEstateID + 1);
            currentRealEstateAddress = currentRealEstate.Address;
        }

    }

    private void OnModalRealEstatePreviuos()
    {
        // same error here
        currentRealEstate = DataService.RealEstates.First(r => r.RealEstateID == currentRealEstate.RealEstateID - 1);
        currentRealEstateAddress = currentRealEstate.Address;
    }

    private void ValidRealEsatateFormSubmitted(EditContext editContext)
    {
        //call form validation
        if (currentRealEstate == null || currentRealEstate.RealEstateID == 0)
        {
            currentRealEstate.Address = currentRealEstateAddress;
            DataService.AddNewRealEstate(currentRealEstate);
        }
        else
        {
            DataService.SaveUpdatedObject();
        }

        LastSubmitResult = "OnValidSubmit was executed";
        modalRealEstate.HideAsync();
    }

    private void InvalidRealEstateFormSubmitted(EditContext editContext)
    {
        LastSubmitResult = "OnInvalidSubmit was executed";
    }
    #endregion

    #region Devices

    private Modal modalReasignDevices = default!;
    private Modal modalEditAddDevice = default!;
    private Modal modalDeviceDelete = default!;

    private async Task OnShowModalDeleteDeviceClick(int deviceId)
    {
        int ChosedRealEsatateID = DataService.GetRealEstateByDeviceID(deviceId);
        currentRealEstate = DataService.GetRealEstate(ChosedRealEsatateID);
        currentDevice = DataService.GetDeviceById(deviceId);
        //move these lines to DataService method

        await modalDeviceDelete.ShowAsync();
    }

    private async Task DeleteDevice_Click(bool _confirmDeletion)
    {
        if (_confirmDeletion == true)
        {
            // manualy assigned value!
            DeviceProfile deviceToDelete = currentRealEstate.DevicesProfiles.First(d => d.DeviceID == currentDevice.DeviceID);
            if (deviceToDelete != null)
            {
                Logic.RemoveDevice(currentRealEstate, deviceToDelete, DataService.Users, DataService.XmlPath);
            }
            else
            {
                return;
            }
        }
        await OnHideModalDeleteDeviceConfirmationCloseClick();
    }

    private async Task OnHideModalDeleteDeviceConfirmationCloseClick()
    {
        await modalDeviceDelete.HideAsync();
    }

    private async Task MoveDevicesListToOtherRealEstate(int SelectedRealEstateID, RealEstate currentRealEstate)
    {
        if (currentRealEstate != null && SelectedRealEstateID > 0)
        {
            DataService.MoveDeviceListToOtherRealEstate(SelectedRealEstateID, currentRealEstate);
            await DeleteRealEstate_Click(true);
        }
        else
        {
            return;
        }
        await OnHideModalReasignDevicesClick();
    }

    private async Task LeaveDevicesUnassigned(RealEstate currentRealEstate)
    {
        if (currentRealEstate != null)
        {
            DataService.LeaveDevicesUnassigned(currentRealEstate);
            await DeleteRealEstate_Click(true);
        }
        await OnHideModalReasignDevicesClick();
    }

    private async Task OnShowModalAddNewDevice()
    {
        currentUser = DataService.CurrentUser;
        currentDevice = new();
        await modalEditAddDevice.ShowAsync();
    }

    private async Task OnShowModalEditDeviceClick(int deviceID)
    {
        realEsatateIdToAddDevice = DataService.GetRealEstateByDeviceID(deviceID);
        currentUser = DataService.CurrentUser;
        currentDevice = DataService.GetDeviceById(deviceID);        
        await modalEditAddDevice.ShowAsync();

    }

    private async Task OnHideModalEditDeviceClick()
    {
        await modalEditAddDevice.HideAsync();
    }

    private async Task OnShowModalReasignDevices(int currentRealEstateID)
    {
        await modalReasignDevices.ShowAsync();
    }

    private async Task OnHideModalReasignDevicesClick()
    {
        await modalReasignDevices.HideAsync();
    }

    // error with the sequences
    private void OnModalDeviceNext()
    {
        // this should be moved to DataService and to the next-previuos buttons component should be
        // passed currentDevice [Parameter] to use method in one place instead of changing in every copied component.
        int currentDeviceIndex = 0;
        List<DeviceProfile> allDevices = DataService.Devices;
        if (currentDevice != null)
        {
            currentDeviceIndex = allDevices.IndexOf(currentDevice);
            currentDevice = allDevices[currentDeviceIndex + 1];
            //one line code with linq
            // currentDevice = allDevices[(allDevices.IndexOf(currentDevice) + 1) % allDevices.Count];
        }
    }

    private void OnModalDevicePreviuos()
    {
        int currentDeviceIndex = 0;
        List<DeviceProfile>
            allDevices = DataService.Devices;
        //maybe need to sort list first by ID and then use indexing.
        allDevices.Sort();
        if (currentDevice != null)
        {
            currentDeviceIndex = allDevices.IndexOf(currentDevice);
            currentDevice = allDevices[currentDeviceIndex - 1];
            //one line code with linq
            // currentDevice = allDevices[(allDevices.IndexOf(currentDevice) + 1) % allDevices.Count];
        }
    }




    #endregion

    #region Warranties

    private Modal modalEditAddDeviceWarranty = default!;

    private async Task OnShowModalEditAddDeviceWarrantyClick(int deviceID)
    {
        currentDevice = DataService.GetDeviceById(deviceID);
        await modalEditAddDeviceWarranty.ShowAsync();
    }

    private async Task OnHideModalEditAddDeviceWarrantyClick()
    {
        await modalEditAddDeviceWarranty.HideAsync();
    }

    void ValidWarrantyDetailsFormSubmitted(EditContext editcontext)
    {
        DataService.SaveUpdatedObject();
        LastSubmitResult = "OnValidSubmit was executed";
        modalEditAddDeviceWarranty.HideAsync();
    }

    void InvalidWarrantyDetailsFormSubmitted(EditContext editContext)
    {
        LastSubmitResult = "OnInvalidSubmit was executed";
    }

    #endregion

    #region Shops

    private Modal modalEditAddShopDetails = default!;

    private async Task OnShowModalEditAddShopClick(int deviceID)
    {
        currentDevice = DataService.GetDeviceById(deviceID);
        //getting null reference for device if i'm trying to edit shop details directly after I added new device. It works fine after I reload app
        shopAddress = currentDevice.DeviceWarranty.Shop.Address;
        await modalEditAddShopDetails.ShowAsync();
    }

    private async Task OnHideModalEditAddShopClick()
    {
        await modalEditAddShopDetails.HideAsync();
    }

    void ValidShopDetailsFormSubmitted(EditContext editcontext)
    {

        DataService.SaveUpdatedObject();
        LastSubmitResult = "OnValidSubmit was executed";
        modalEditAddShopDetails.HideAsync();
    }

    void InvalidShopDetailsFormSubmitted(EditContext editContext)
    {
        LastSubmitResult = "OnInvalidSubmit was executed";
    }

    #endregion

    protected override void OnInitialized()
    {
        // _testItems = DataService.CurrentUser.RealEstates.SelectMany(realEstate => realEstate.DevicesProfiles).AsQueryable();
        editContext = new(realEstateToAddDevice);
        editDeviceContext = new(deviceToAdd);
        base.OnInitialized();
    }

    private string message = "";
    protected override void OnParametersSet()
    {
        if (Tab == 1)
        {
            _tabControl.ActivePage = _realEstatePage;

        }
        else if (Tab == 2)
        {

        }
        else if (Tab == 3)
        {

        }
        else
        {
            message = "There is no option";
        }
    }

    // // // // // // // //


    // moved to validation method to keep one button
    // public async Task AddOrSave()
    // {
    //     if (currentRealEstate == null || currentRealEstate.RealEstateID == 0)
    //     {
    //         currentRealEstate.Address = currentRealEstateAddress;
    //         DataService.AddNewRealEstate(currentRealEstate);
    //     }
    //     else
    //     {
    //         DataService.SaveUpdatedRealEstate();
    //     }
    //     await modalRealEstate.HideAsync();
    // }

    // Void or async Task?

    // private void OnModalDeviceWarrantyNext()
    // {
    //     currentDevice = DataService.Devices.First(d => d.DeviceID == currentDevice.DeviceID + 1);
    // }

    // private void OnModalDeviceWarrantyPreviuos()
    // {
    //     currentDevice = DataService.Devices.First(d => d.DeviceID == currentDevice.DeviceID - 1);
    // }

    // private void OnModalDeviceShopNext()
    // {
    //     currentDevice = DataService.Devices.First(d => d.DeviceID == currentDevice.DeviceID + 1);
    // }

    // private void OnModalDeviceShopPreviuos()
    // {
    //     currentDevice = DataService.Devices.First(d => d.DeviceID == currentDevice.DeviceID - 1);
    // }
}
        }
