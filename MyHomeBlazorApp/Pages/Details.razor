@page "/details"

@using Microsoft.AspNetCore.Components.QuickGrid
@using MyHome.Models;
@using MyHomeBlazorApp.BlazorData;
@using MyHome;
@using MyHomeBlazorApp.Pages
@using MyHomeBlazorApp.Components
@using BlazorBootstrap
@inject NavigationManager uriHelper;
@inject BlazorData.DataService DataService;



<h3>Details</h3>

<div class="row">
    <div class="col">
        <Button @onclick="ShowRealEstatesTable">Real Estates Details</Button>
        <Button @onclick="ShowDevicesTable">Devices Details</Button>
        <Button @onclick="ShowWarrantiesTable">Warranties Details</Button>
        <Button @onclick="ShowShopsTable">Shops Details</Button>
    </div>
</div>
<div class="row">
    @if (_showRealEstatesTableVisible)
    {
        <QuickGrid Items="@DataService.RealEstates.AsQueryable()">
            @* Here is "edit" button, but there are two different forms: Real Estate and Address. For logic reason these two should be combined as one editable form*@
            <TemplateColumn>
                <div>
                    <Button @onclick="() => OnShowModalRealEstateClick(context.RealEstateID)">Edit</Button>
                    <Button>Delete</Button>
                </div>
            </TemplateColumn>
            <PropertyColumn Title="ID" Property="@(r => r.RealEstateID)" Sortable="true" />
            <PropertyColumn Title="Name" Property="@(r => r.RealEstateName)" Sortable="true" />
            <PropertyColumn Title="Street Name" Property="@(r => r.Address.StreetName)" />
            <PropertyColumn Title="House Number" Property="@(r => r.Address.HouseNumber)" />
            <TemplateColumn Title="Number's Extension">
                <NoData Text="@context.Address.HouseNumberExtension"></NoData>
            </TemplateColumn>
            <PropertyColumn Property="@(r => r.Address.City)" Sortable="true" />
            <PropertyColumn Property="@(r => r.Address.Country)" Sortable="true" />
            <PropertyColumn Title="Total Devices" Property="@(r => r.DevicesProfiles.Count())" />
        </QuickGrid>
    }
</div>
<div class="row">
    @if (_showDevicesTableVisible)
    {
        <QuickGrid Items="@DataService.Devices.AsQueryable()">
            @* Here is "edit" button, but there are two different forms: Real Estate and Address. For logic reason these two should be combined as one editable form*@
            <TemplateColumn>
                <div>
                    <Button @onclick="() => OnShowModalEditAddDeviceClick(context.DeviceID)">Edit</Button>
                    <Button>Delete</Button>
                </div>
            </TemplateColumn>
            <TemplateColumn Title="Real Estate ID">
                <span>@DataService.GetRealEstateByDeviceID(context.DeviceID)</span>
            </TemplateColumn>
            @* how to make output "no data" if user didn't put in details for alomst each part. Some will be   *@
            <PropertyColumn Title="ID" Property="@(d=>d.DeviceID)" Sortable="true" />
            <PropertyColumn Title="Name" Property="@(d => d.DeviceName)" Sortable="true" />
            <PropertyColumn Title="Produser" Property="@(d => d.DeviceProduser)" Sortable="true" />
            <PropertyColumn Title="Type" Property="@(d => d.DeviceType)" Sortable="true" />
            <PropertyColumn Title="Serial Number" Property="@(d => d.DeviceSerialNumber)" />
            <PropertyColumn Title="Model Number" Property="@(d => d.DeviceModelNumber)" />
            <PropertyColumn Title="IP Address" Property="@(d => d.IpAddress)" />
            <PropertyColumn Title="Mac Address" Property="@(d => d.MacAdrress)" />
            <TemplateColumn Title="Manual">
                <Button class="btn btn-sm" href="@context.ManualBookLink">Manual</Button>
            </TemplateColumn>
            <PropertyColumn Title="Warranty Expires" Property="@(d => d.DeviceWarranty.WarrantyEnd.ToShortDateString())" Sortable="true" />
        </QuickGrid>
    }

</div>
<div class="row">
    @if (_showWarrantiesTableVisible)
    {
        <QuickGrid Items="@DataService.Devices.AsQueryable()">
            @* Here is "edit" button, but there are two different forms: Real Estate and Address. For logic reason these two should be combined as one editable form*@
            <TemplateColumn>
                <div>
                    <Button @onclick="() => OnShowModalEditAddDeviceWarrantyClick(context.DeviceID)">Edit</Button>
                    <Button>Delete</Button>
                </div>
            </TemplateColumn>
            <TemplateColumn Title="Real Estate ID">
                <span>@DataService.GetRealEstateByDeviceID(context.DeviceID)</span>
            </TemplateColumn>
            @* how to make output "no data" if user didn't put in details for alomst each part. Some will be *@
            <PropertyColumn Title="Device ID" Property="@(d => d.DeviceID)" Sortable="true" />
            <PropertyColumn Title="Purchase Date" Property="@(d => d.DeviceWarranty.PurchaseDate.ToShortDateString())" Sortable="true" />
            <PropertyColumn Title="Expires" Property="@(d => d.DeviceWarranty.WarrantyEnd.ToShortDateString())" Sortable="true" />
            <PropertyColumn Title="Length (Days)" Property="@(d => d.DeviceWarranty.WarrantyPeriod.TotalDays)" />
            @* it would be great for user to uppload the receipts or insurances to database to make it easy to find! Other method it could be linked in the user device *@
            <TemplateColumn Title="Receipt">
                <Button class="btn btn-sm" href="@context.DeviceWarranty.ReceiptLink">Receipt</Button>
            </TemplateColumn>
            <PropertyColumn Title="Extra Warranty Length (Days)" Property="@(d => d.DeviceWarranty.ExtraInsuranceWarrantyLenght.TotalDays)" Sortable="true" />
            @* maybe I should separate extended warranty and insurance because it is easier to track and to see what is valid *@
            <TemplateColumn Title="Extra's Receipt">
                <Button class="btn btn-sm" href="@context.DeviceWarranty.ReceiptLink">Receipt</Button>
            </TemplateColumn>
        </QuickGrid>
    }

</div>
<div class="row">
    @if (_showShopsTableVisible)
    {
        <QuickGrid Items="@DataService.Devices.AsQueryable()">
            @* Here is "edit" button, but there are two different forms: Real Estate and Address. For logic reason these two should be combined as one editable form*@
            <TemplateColumn>
                <div>
                    <Button @onclick="() => OnShowModalEditAddShopClick(context.DeviceID)">Edit</Button>
                    <Button>Delete</Button>
                </div>
            </TemplateColumn>
            <TemplateColumn Title="Real Estate ID">
                <span>@DataService.GetRealEstateByDeviceID(context.DeviceID)</span>
            </TemplateColumn>
            @* how to make output "no data" if user didn't put in details for alomst each part. Some will be *@
            <PropertyColumn Title="Device ID" Property="@(d => d.DeviceID)" Sortable="true" />
            <PropertyColumn Title="Shop Name" Property="@(d => d.DeviceWarranty.Shop.ShopName)" Sortable="true" />
            <PropertyColumn Title="Website Adrress" Property="@(d => d.DeviceWarranty.Shop.ShopWebAddress)" Sortable="true" />
            <PropertyColumn Title="Phone Number" Property="@(d => d.DeviceWarranty.Shop.PhoneNumber)" />
            <PropertyColumn Title="Street Name" Property="@(d => d.DeviceWarranty.Shop.Address.StreetName)" />
            <PropertyColumn Title="House Number" Property="@(d => d.DeviceWarranty.Shop.Address.HouseNumber)" />
            <PropertyColumn Title="Number Extension" Property="@(d => d.DeviceWarranty.Shop.Address.HouseNumberExtension)" />
            <PropertyColumn Title="City" Property="@(d => d.DeviceWarranty.Shop.Address.City)" Sortable="true" />
            <PropertyColumn Title="Country" Property="@(d => d.DeviceWarranty.Shop.Address.Country)" Sortable="true" />
        </QuickGrid>
    }


    <!--#region Edit Form Modals  -->

    <div class="row">
        <Modal @ref="modalRealEstate" Title="Edit Real Estate Address">
            <BodyTemplate>
                <EditForm Model="DataService.RealEstates">
                    <div class="form-group row">
                        <label for="realEstateName" class="col-sm-2 col-form-label">
                            Real Estate Name
                        </label>
                        <div class="col-sm-10">
                            <InputText id="realEstateName" class="form-control" placeholder="Real Estate Name"
                                       @bind-Value="currentRealEstate.RealEstateName" />
                        </div>
                    </div>
                </EditForm>
                <AddressComponent CurrentObjectAddress="@currentRealEstateAddress" />
            </BodyTemplate>
            <FooterTemplate>
                @if (currentRealEstate.RealEstateID == DataService.RealEstates.Count)
                {
                    <Button Color="ButtonColor.Primary" @onclick="OnModalRealEstatePreviuos">Previuos</Button>
                } 
                else 
                {                
                    <Button Color="ButtonColor.Primary" @onclick="OnModalRealEstateNext">Next</Button>
                }
                <Button Color="ButtonColor.Primary" @onclick="OnHideModalRealEstateClick">Close</Button>
                <Button Color="ButtonColor.Primary">Save changes</Button>
            </FooterTemplate>
        </Modal>
    </div>
    <div class="row">
        @* Maybe it is good to do two separate modals, one for new device and other for device editing *@
        <Modal @ref="modalEditAddDevice" Title="Edit Device Details">
            <BodyTemplate>
                <AddEditDeviceComponent Device="@currentDevice" />
            </BodyTemplate>
            <FooterTemplate>
                <Button Color="ButtonColor.Primary" @onclick="OnHideModalEditAddDeviceClick">Close</Button>
                <Button Color="ButtonColor.Primary">Save changes</Button>
            </FooterTemplate>
        </Modal>
    </div>
    <div class="row">
        @* Maybe it is good to do two separate modals, one for new device and other for device editing *@
        <Modal @ref="modalEditAddDeviceWarranty" Title="Edit Device Warranty Details">
            <BodyTemplate>
                <AddEditWarrantyDetails CurrentDevice="@currentWarrantyDevice" />
            </BodyTemplate>
            <FooterTemplate>
                <Button Color="ButtonColor.Primary" @onclick="OnHideModalEditAddDeviceWarrantyClick">Close</Button>
                <Button Color="ButtonColor.Primary">Save changes</Button>
            </FooterTemplate>
        </Modal>
    </div>
    <div class="row">
        @* Maybe it is good to do two separate modals, one for new device and other for device editing *@
        <Modal @ref="modalEditAddShopDetails" Title="Edit Shop Details">
            <BodyTemplate>
                <AddEditShopDetailsComponent CurrentDevice="@currentShopDetails" />
                <AddressComponent CurrentObjectAddress="@shopAddress" />

            </BodyTemplate>
            <FooterTemplate>
                <Button Color="ButtonColor.Primary" @onclick="OnHideModalEditAddShopClick">Close</Button>
                <Button Color="ButtonColor.Primary">Save changes</Button>
            </FooterTemplate>
        </Modal>
    </div>
</div>


<!--#endregion -->
@code {

    private RealEstate? realEstate;
    private Address currentRealEstateAddress = new();
    private DeviceProfile currentDevice = new();
    private DeviceProfile currentWarrantyDevice = new();
    private DeviceProfile currentShopDetails = new();
    private RealEstate currentRealEstate = new();
    private Address shopAddress = new();

    bool _showRealEstatesTableVisible = true;
    bool _showDevicesTableVisible = false;
    bool _showWarrantiesTableVisible = false;
    bool _showShopsTableVisible = false;

    private void ShowRealEstatesTable()
    {
        _showRealEstatesTableVisible = !_showRealEstatesTableVisible;
        _showDevicesTableVisible = false;
        _showWarrantiesTableVisible = false;
        _showShopsTableVisible = false;
    }
    private void ShowDevicesTable()
    {
        _showDevicesTableVisible = !_showDevicesTableVisible;
        _showWarrantiesTableVisible = false;
        _showShopsTableVisible = false;
        _showRealEstatesTableVisible = false;
    }
    private void ShowWarrantiesTable()
    {
        _showWarrantiesTableVisible = !_showWarrantiesTableVisible;
        _showShopsTableVisible = false;
        _showRealEstatesTableVisible = false;
        _showDevicesTableVisible = false;
    }
    private void ShowShopsTable()
    {
        _showShopsTableVisible = !_showShopsTableVisible;
        _showRealEstatesTableVisible = false;
        _showDevicesTableVisible = false;
        _showWarrantiesTableVisible = false;
    }

    private Modal modalRealEstate = default!;

    private async Task OnShowModalRealEstateClick(int id)
    {
        currentRealEstate = DataService.RealEstates.First(r => r.RealEstateID == id);
        currentRealEstateAddress = currentRealEstate.Address;
        await modalRealEstate.ShowAsync();
    }

    private async Task OnHideModalRealEstateClick()
    {
        await modalRealEstate.HideAsync();
    }

    private Modal modalEditAddDevice = default!;

    private async Task OnShowModalEditAddDeviceClick(int id)
    {
        currentDevice = DataService.Devices.First(d => d.DeviceID == id);
        await modalEditAddDevice.ShowAsync();
    }

    private async Task OnHideModalEditAddDeviceClick()
    {
        await modalEditAddDevice.HideAsync();
    }

    private Modal modalEditAddDeviceWarranty = default!;

    private async Task OnShowModalEditAddDeviceWarrantyClick(int id)
    {
        currentWarrantyDevice = DataService.Devices.First(d => d.DeviceID == id);
        await modalEditAddDeviceWarranty.ShowAsync();
    }

    private async Task OnHideModalEditAddDeviceWarrantyClick()
    {
        await modalEditAddDeviceWarranty.HideAsync();
    }

    private Modal modalEditAddShopDetails = default!;

    private async Task OnShowModalEditAddShopClick(int id)
    {
        currentShopDetails = DataService.Devices.First(d => d.DeviceID == id);
        shopAddress = currentShopDetails.DeviceWarranty.Shop.Address;
        await modalEditAddShopDetails.ShowAsync();
    }

    private async Task OnHideModalEditAddShopClick()
    {
        await modalEditAddShopDetails.HideAsync();
    }

    private async Task OnModalRealEstateNext()
    {
        currentRealEstate = DataService.RealEstates.First(r => r.RealEstateID == currentRealEstate.RealEstateID + 1);
        currentRealEstateAddress = currentRealEstate.Address;
    }

    private async Task OnModalRealEstatePreviuos()
    {
        currentRealEstate = DataService.RealEstates.First(r => r.RealEstateID == currentRealEstate.RealEstateID - 1);
        currentRealEstateAddress = currentRealEstate.Address;
    }

}
