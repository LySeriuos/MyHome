@page "/details/{Tab:int}"
@page "/details"


@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Mvc
@using Microsoft.EntityFrameworkCore
@using MyHome.Models;
@using MyHomeBlazorApp.BlazorData;
@using MyHome;
@using MyHomeBlazorApp.Pages
@using BlazorBootstrap
@using MyHomeBlazorApp.Components.Account
@using MyHomeBlazorApp.Components
@using MyHomeBlazorApp.Components.TabComponents
@using MyHomeBlazorApp.Shared
@using MyHomeBlazorApp.Components.Modals
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.WebUtilities
@using System.Threading.Tasks
@using System.Threading
@using My_Home
@inject NavigationManager uriHelper
@inject NavigationManager NavManager
@inject BlazorData.DataService DataService;
@inject IJSRuntime JSRuntime
@inject UserManager<MyHomeBlazorAppUser> UserManager
@inject IUserStore<MyHomeBlazorAppUser> UserStore
@inject SignInManager<MyHomeBlazorAppUser> SignInManager
@inject IEmailSender<MyHomeBlazorAppUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<MyHomeBlazorAppUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject MyHomeBlazorAppContext _dbcontext;
@using Microsoft.AspNetCore.Identity
@attribute [Authorize]


<h3>Details</h3>



<TabControl TabID="TabID">
    <TabPage Text="Real Estates">
        <div class="grid">
            <Button Class="btn my-3 addNew-btn btn-rounded" @onclick="OnShowModalAddNewRealEstate">+ Add New Real Estate</Button>
            <QuickGrid tabindex="1" Items="@_realEstatesListAsQueryable">
                <TemplateColumn>
                    <div>
                        <Button Class="btn btn-outline-dark" @onclick="() => OnShowModalRealEstateClick(context.RealEstateID)">Edit</Button>
                        <Button Class="btn btn-outline-danger" @onclick="() => OnShowModalChooseOptionDeleteRealEstate(context.RealEstateID)">Delete</Button>
                    </div>
                </TemplateColumn>
                <PropertyColumn Title="ID" Property="@(r => r.RealEstateID)" Sortable="true" />
                <PropertyColumn Title="Name" Property="@(r => r.RealEstateName)" Sortable="true" />
                <PropertyColumn Title="Street Name" Property="@(r => r.Address.StreetName)" />
                <PropertyColumn Title="House Number" Property="@(r => r.Address.HouseNumber)" />
                <TemplateColumn Title="Number's Extension">
                    <NoData Text="@context.Address.HouseNumberExtension"></NoData>
                </TemplateColumn>
                <PropertyColumn Property="@(r => r.Address.City)" Sortable="true" />
                <PropertyColumn Property="@(r => r.Address.Country)" Sortable="true" />
                <PropertyColumn Title="Total Devices" Property="@(r => r.DevicesProfiles.Count())" />
            </QuickGrid>
        </div>
    </TabPage>
    <TabPage Text="Devices">
        <div class="grid">
            <Button Class="btn my-3 addNew-btn" @onclick="OnShowModalAddNewDevice">+ Add New Device</Button>
            <QuickGrid tabindex="2" Items="@_devicesListAsQueryable">
                <TemplateColumn>
                    <div>
                        <Button Class="btn btn-outline-dark" @onclick="() => ShowDeviceEditFormInModal(context.DeviceID)">Edit</Button>
                        <Button Class="btn btn-outline-danger" @onclick="() => OnShowModalDeleteDeviceClick(context.DeviceID)">Delete</Button>
                    </div>
                </TemplateColumn>
                <TemplateColumn Title="Real Estate ID" Sortable="true" SortBy="GridSort<DeviceProfile>.ByAscending(d => DataService.GetRealEstateByDeviceID(d.DeviceID)).ThenAscending(d=>d.DeviceID)">
                    @if (DataService.GetRealEstateByDeviceID(context.DeviceID) != 0)
                    {
                        <span>@DataService.GetRealEstateByDeviceID(context.DeviceID)</span>
                    }
                </TemplateColumn>
                <PropertyColumn Title="ID" Property="@(d=>d.DeviceID)" Sortable="true" />
                <PropertyColumn Title="Name" Property="@(d => d.DeviceName)" Sortable="true" />
                <PropertyColumn Title="Produser" Property="@(d => d.DeviceProduser)" Sortable="true" />
                <PropertyColumn Title="Type" Property="@(d => d.DeviceType)" Sortable="true" />
                <PropertyColumn Title="Serial Number" Property="@(d => d.DeviceSerialNumber)" />
                <PropertyColumn Title="Model Number" Property="@(d => d.DeviceModelNumber)" />
                <PropertyColumn Title="IP Address" Property="@(d => d.IpAddress)" />
                <PropertyColumn Title="Mac Address" Property="@(d => d.MacAdrress)" />
                <TemplateColumn Title="Manual">
                    <Button class="btn-sm btn btn-outline-info" @onclick="() => DataService.Navigate(context.DeviceID, JSRuntime)">Manual</Button>
                </TemplateColumn>
            </QuickGrid>
        </div>
    </TabPage>
    <TabPage Text="Devices Warranties">
        <div class="grid">
            <QuickGrid tabindex="3" Items="@_devicesListAsQueryable">

                <TemplateColumn>
                    <div>
                        <Button Class="btn btn-outline-dark" @onclick="() => OnShowModalEditAddDeviceWarrantyClick(context.DeviceID)">Edit</Button>
                    </div>
                </TemplateColumn>
                <TemplateColumn Title="Real Estate ID" Sortable="true" SortBy="GridSort<DeviceProfile>.ByAscending(d => DataService.GetRealEstateByDeviceID(d.DeviceID)).ThenAscending(d=>d.DeviceID)">
                    <span>@DataService.GetRealEstateByDeviceID(context.DeviceID)</span>
                </TemplateColumn>
                @* how to make output "no data" if user didn't put in details for alomst each part. Some will be *@
                <PropertyColumn Title="Device ID" Property="@(d => d.DeviceID)" Sortable="true" />
                <PropertyColumn Title="Purchase Date" Property="@(d => d.DeviceWarranty.PurchaseDate.ToShortDateString())" Sortable="true" />
                <PropertyColumn Title="Expires" Property="@(d => d.DeviceWarranty.WarrantyEnd.ToShortDateString())" Sortable="true" />
                <PropertyColumn Title="Length" Property="@(d => d.DeviceWarranty.Years)" />
                @* it would be great for user to uppload the receipts or insurances to database to make it easy to find! Other method it could be linked in the user device *@
                <TemplateColumn Title="Receipt">
                    @if (String.IsNullOrEmpty(context.DeviceWarranty.ReceiptLink))
                    {
                        <span class="text-sm navbar-text px-3 py-2"><small>No File</small></span>
                    }
                    else
                    {
                        <Button class="button-51" @onclick="()=>NavigateToWarrantyFile(context.DeviceID)">Open</Button>
                    }

                </TemplateColumn>
                <PropertyColumn Title="Extra Warranty Length" Property="@(d => d.DeviceWarranty.ExtendedWarrantyinYears)" Sortable="true" />
                @* maybe I should separate extended warranty and insurance because it is easier to track and to see what is valid *@
                <TemplateColumn Title="Extra's Receipt">
                    @if (String.IsNullOrEmpty(context.DeviceWarranty.ExtraInsuranceWarrantyLink))
                    {
                        <span class="text-sm navbar-text px-3 py-2"><small>No File</small></span>
                    }
                    else
                    {
                        <Button class="test-btn button-51" @onclick="()=>NavigateToExtraWarrantyFile(context.DeviceID)">Open</Button>
                    }
                </TemplateColumn>
            </QuickGrid>
        </div>
    </TabPage>
    <TabPage Text="Shops Details">
        <div class="grid">
            <QuickGrid tabindex="4" Items="@_devicesListAsQueryable">
                <TemplateColumn>
                    <div>
                        <Button Class="btn btn-outline-dark" @onclick="() => OnShowModalEditAddShopClick(context.DeviceID)">Edit</Button>
                    </div>
                </TemplateColumn>
                <TemplateColumn Title="Real Estate ID" Sortable="true" SortBy="GridSort<DeviceProfile>.ByAscending(d => DataService.GetRealEstateByDeviceID(d.DeviceID)).ThenAscending(d=>d.DeviceID)">
                    <span>@DataService.GetRealEstateByDeviceID(context.DeviceID)</span>
                </TemplateColumn>
                <PropertyColumn Title="Device ID" Property="@(d => d.DeviceID)" Sortable="true" />
                <PropertyColumn Title="Shop Name" Property="@(d => d.DeviceWarranty.Shop.ShopName)" Sortable="true" />
                <PropertyColumn Title="Website Adrress" Property="@(d => d.DeviceWarranty.Shop.ShopWebAddress)" Sortable="true" />
                <PropertyColumn Title="Phone Number" Property="@(d => d.DeviceWarranty.Shop.PhoneNumber)" />
                <PropertyColumn Title="Street Name" Property="@(d => d.DeviceWarranty.Shop.Address.StreetName)" />
                <PropertyColumn Title="House Number" Property="@(d => d.DeviceWarranty.Shop.Address.HouseNumber)" />
                <PropertyColumn Title="Number Extension" Property="@(d => d.DeviceWarranty.Shop.Address.HouseNumberExtension)" />
                <PropertyColumn Title="City" Property="@(d => d.DeviceWarranty.Shop.Address.City)" Sortable="true" />
                <PropertyColumn Title="Country" Property="@(d => d.DeviceWarranty.Shop.Address.Country)" Sortable="true" />
            </QuickGrid>
        </div>
    </TabPage>
    @if (_unassignedDevicesListAsQueryable.AsQueryable().ToList().Count > 0)
    {
        <TabPage Text="Unassigned Devices">
            <div class="grid">
                <QuickGrid tabindex="5" Items="_unassignedDevicesListAsQueryable">
                    <TemplateColumn>
                        <div>
                            <Button Class="btn btn-outline-dark" @onclick="() => OnShowModalEditDeviceClick(context.DeviceID)">Edit</Button>
                            <Button Class="btn btn-outline-danger" @onclick="() => OnShowModalDeleteDeviceClick(context.DeviceID)">Delete</Button>
                        </div>
                    </TemplateColumn>
                    <PropertyColumn Title="ID" Property="@(d=>d.DeviceID)" Sortable="true" />
                    <PropertyColumn Title="Name" Property="@(d => d.DeviceName)" Sortable="true" />
                    <PropertyColumn Title="Produser" Property="@(d => d.DeviceProduser)" Sortable="true" />
                    <PropertyColumn Title="Type" Property="@(d => d.DeviceType)" Sortable="true" />
                    <PropertyColumn Title="Serial Number" Property="@(d => d.DeviceSerialNumber)" />
                    <PropertyColumn Title="Model Number" Property="@(d => d.DeviceModelNumber)" />
                    <PropertyColumn Title="IP Address" Property="@(d => d.IpAddress)" />
                    <PropertyColumn Title="Mac Address" Property="@(d => d.MacAdrress)" />
                    <TemplateColumn Title="Manual">
                        <Button class="btn btn-sm" href="@context.ManualBookLink">Manual</Button>
                    </TemplateColumn>
                </QuickGrid>
            </div>
        </TabPage>
    }
</TabControl>

<!--#region Edit Form Modals  -->

<div>
    <ModalEditAddRealEstate @ref="@refModalEditAddRealEstate"
    CurrentRealEstate="@currentRealEstate">
    </ModalEditAddRealEstate>
</div>

<div>
    <ModalEditAddDevice @ref="@refModalEditAddDevice"
    CurrentDevice="@currentDevice"
    CurrentUser="@currentUser"
    RealEsatateIdToAddDevice="@currentRealEstate.RealEstateID">
    </ModalEditAddDevice>
</div>
<div>
    <ModalEditWarrantyDetails @ref="_refModalEditWarrantyDetails"
    CurrentDevice="@currentDevice"
    DevicesListAsQueryable="@_devicesListAsQueryable">
    </ModalEditWarrantyDetails>
</div>
<div>
    <ModalEditShopDetails @ref="refModalEditShopDetails"
    CurrentDevice="@currentDevice"
    ShopAddress="@shopAddress"
    DevicesListAsQueryable="@_devicesListAsQueryable">
    </ModalEditShopDetails>
</div>
<div>
    <ModalDeleteRealEstate @ref="refModalRealEstateDelete"
    CurrentRealEstate="@currentRealEstate">
    </ModalDeleteRealEstate>
</div>
<div>
    <ModalReassignDevices @ref="@refModalReasignDevices"
    SelectedRealEstateID="@SelectedRealEstateID"
    CurrentUser="@currentUser"
    CurrentRealEstate="@currentRealEstate">
    </ModalReassignDevices>
</div>
<div>
    <ModalConfirmDeviceDeletion @ref="refModalConfirmDeviceDeletion"
    CurrentDeviceToDelete="@currentDevice">
    </ModalConfirmDeviceDeletion>
</div>
<div>
    <ModalDeleteSuccessful @ref="refModalDeleteSuccess"
    ObjectName="@_deletedObjectName">
    </ModalDeleteSuccessful>
</div>
<div>
    <SuccessModal @ref="_refSuccessModal" Title="Add/Edit Confirmation" Text="Data updated/added successfully!"></SuccessModal>
</div>

@* CustomReusableModal is for adding different forms in one modal to save code lines *@
@* <div>
    <CustomReusableModal @ref="_reusableModal" Title="Edit Device Details">
        <AddEditDeviceForm CurrentDevice="currentDevice"
        CurrentUser="currentUser"
        DataChangedEvent="DeviceListDataHasChangedTest" />
    </CustomReusableModal>
</div> *@



<!--#endregion -->
@code {
    // Devices Details page should be sorted by devices ID number by default.
    // Check IF the link to the file moves together with the device Profile!!!!!!!
    [Parameter]
    public int Tab { get; set; }

    private int SelectedRealEstateID
    {
        get => selectedRealEstateID;
        set { selectedRealEstateID = value; }
    }

    private int TabID = 0;
    private int selectedRealEstateID = -1;
    private string _chooseOptionValue = "Choose Real Estate";
    private string? _deletedObjectName;
    private string message = "";
    public bool listHasBeenChanged = false;
    private RealEstate currentChosedRealEsate = new();
    private RealEstate currentRealEstate = new();
    private Address currentRealEstateAddress = new();
    private Address shopAddress = new();
    private DeviceProfile currentDevice { get; set; } = new();
    private UserProfile currentUser = new();
    private const string BaseApiUrl = "https://www.google.se/search?q=";
    private IQueryable<DeviceProfile>? _devicesListAsQueryable;
    private IQueryable<RealEstate>? _realEstatesListAsQueryable;
    private IQueryable<RealEstate>? _realEstatesListAsQueryable11;
    private IQueryable<DeviceProfile>? _unassignedDevicesListAsQueryable;
    public MyHomeBlazorAppUser user = default!;
    public Action? UnassignedDevicesListChanged;
    public string deviceName
    {
        get => currentDevice.DeviceName;
        set { currentDevice.DeviceName = value; }
    }
    private CustomReusableModal _reusableModal = default!;
    private SuccessModal _refSuccessModal = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [Inject]
    public AuthenticationStateProvider AuthenticationState { get; set; }




    private async Task ShowDeviceEditFormInModal(int deviceID)
    {
        currentUser = DataService.CurrentUserWithAllData;
        currentDevice = DataService.GetDeviceById(deviceID);
        currentRealEstate.RealEstateID = DataService.GetRealEstateByDeviceID(currentDevice.DeviceID);
        await refModalEditAddDevice.OnShowModalEditDeviceClick();
    }
    // user = await UserAccessor.GetRequiredUserAsync(HttpContext);
    private async Task OnShowModalAddNewDevice()
    {
        currentUser = DataService.CurrentUserWithAllData;
        currentDevice = new();
        currentChosedRealEsate.RealEstateID = 0;
        await refModalEditAddDevice.OnShowModalEditDeviceClick();
    }

    private async Task NavigateToExtraWarrantyFile(int deviceID)
    {
        currentDevice = DataService.GetDeviceById(deviceID);
        string currentWarrantyReceiptLink = currentDevice.DeviceWarranty.ExtraInsuranceWarrantyLink;
        string fileUrl = DataService.GetFileUrl(currentWarrantyReceiptLink, currentDevice.DeviceID);
        await JSRuntime.InvokeVoidAsync("open", fileUrl, "_blank");
    }

    private async Task NavigateToWarrantyFile(int deviceID)
    {
        currentDevice = DataService.GetDeviceById(deviceID);
        string currentWarrantyReceiptLink = currentDevice.DeviceWarranty.ReceiptLink;
        string fileUrl = DataService.GetFileUrl(currentWarrantyReceiptLink, currentDevice.DeviceID);
        await JSRuntime.InvokeVoidAsync("open", fileUrl, "_blank");

    }


    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            refModalConfirmDeviceDeletion.onDataChanged += DeviceDataHasChanged;
            refModalConfirmDeviceDeletion.onDataChanged += OnModalDeleteSuccess;
            refModalEditAddDevice.changedDeviceListData += DeviceDataHasChanged;
            refModalReasignDevices.onDataChanged += RealEstateDataHasChanged;
            refModalRealEstateDelete.onDataChanged += RealEstateDataHasChanged;
            refModalRealEstateDelete.onDataChanged += OnModalDeleteSuccess;
            refModalEditShopDetails.ShopDataHasChanged += ShopDataHasChanged;
            _refModalEditWarrantyDetails.WarrantyDataHasChanged += WarrantyDataHasChanged;
            refModalEditAddRealEstate.realEstateDataHasChanged += RealEstateDataHasChanged;
            refModalRealEstateDelete.onRequestReassignDevicesListToOtherRealEstate += OnModalReassignDevicesRequest;
            refModalReasignDevices.onDeleteRealEstate += OnModalRealEstateDeleteRequest;
        }
        base.OnAfterRender(firstRender);
    }

    private void OnModalDeleteSuccess()
    {
        refModalDeleteSuccess.OnShowModalClick();
    }

    #region Real Estate

    private ModalEditAddRealEstate refModalEditAddRealEstate = default!;
    private ModalDeleteRealEstate refModalRealEstateDelete = default!;
    private ModalReassignDevices refModalReasignDevices = default!;

    private void RealEstateDataHasChanged()
    {        
        _realEstatesListAsQueryable = DataService.CurrentUserWithAllData.RealEstates.AsQueryable();
        StateHasChanged();
    }

    private void OnModalRealEstateDeleteRequest()
    {
        refModalRealEstateDelete.DeleteRealEstate_Click(true);
    }

    private async Task OnShowModalRealEstateClick(int realEstateID)
    {
        currentRealEstate = DataService.GetRealEstate(realEstateID);

        currentRealEstate = DataService.CurrentDbUserWithRealEstatesData().Result.RealEstates.FirstOrDefault(r => r.RealEstateID == realEstateID);
        currentRealEstateAddress = currentRealEstate.Address;
        await refModalEditAddRealEstate.OnShowModalEditAddRealEstateClick();
    }

    private async Task OnShowModalAddNewRealEstate()
    {
        currentRealEstate = new();
        currentRealEstateAddress = new();
        await refModalEditAddRealEstate.OnShowModalEditAddRealEstateClick();
    }

    private async Task OnShowModalChooseOptionDeleteRealEstate(int currentRealEstateID)
    {
        currentUser = DataService.CurrentUserWithAllData;
        currentRealEstate = DataService.GetRealEstate(currentRealEstateID);
        _deletedObjectName = currentRealEstate.RealEstateName;
        await refModalRealEstateDelete.OnShowModalDeleteRealEstateClick();
    }

    #endregion

    #region Devices

    private ModalEditAddDevice refModalEditAddDevice = default!;
    private ModalDeleteSuccessful refModalDeleteSuccess = default!;
    private ModalConfirmDeviceDeletion refModalConfirmDeviceDeletion = default!;

    private void OnModalReassignDevicesRequest(int realEstateID)
    {
        refModalReasignDevices.OnShowModalReasignDevices(realEstateID);
    }

    private void DeviceDataHasChanged()
    {
        _devicesListAsQueryable = DataService.CurrentUserWithAllData.RealEstates.SelectMany(realEstate => realEstate.DevicesProfiles).AsQueryable();
        _unassignedDevicesListAsQueryable = DataService.GetUserWithUnassignedDevicesList().Result.AsQueryable();
        StateHasChanged();
    }

    private async Task OnShowModalDeleteDeviceClick(int deviceId)
    {
        currentDevice = DataService.GetDeviceById(deviceId);
        _deletedObjectName = currentDevice.DeviceName;
        await refModalConfirmDeviceDeletion.OnShowModalClick();
    }

    private async Task OnShowModalEditDeviceClick(int deviceID)
    {
        currentRealEstate.RealEstateID = DataService.GetRealEstateByDeviceID(deviceID);
        currentUser = DataService.CurrentUserWithAllData;
        currentDevice = DataService.GetDeviceById(deviceID);
        await refModalEditAddDevice.OnShowModalEditDeviceClick();
    }

    #endregion

    #region Warranties

    private ModalEditWarrantyDetails _refModalEditWarrantyDetails = default!;

    private void WarrantyDataHasChanged()
    {
        _devicesListAsQueryable = DataService.CurrentUserWithAllData.RealEstates.SelectMany(realEstate => realEstate.DevicesProfiles).AsQueryable();
        StateHasChanged();
    }

    private async Task OnShowModalEditAddDeviceWarrantyClick(int deviceID)
    {
        currentDevice = DataService.GetDeviceById(deviceID);
        await _refModalEditWarrantyDetails.OnShowModalEditWarrantyClick();
    }

    #endregion

    #region Shops

    private ModalEditShopDetails refModalEditShopDetails = default!;

    private void ShopDataHasChanged()
    {
        _realEstatesListAsQueryable = DataService.CurrentUserWithAllData.RealEstates.AsQueryable();
        StateHasChanged();
    }

    private async Task OnShowModalEditAddShopClick(int deviceID)
    {
        currentDevice = DataService.GetDeviceById(deviceID);
        shopAddress = currentDevice.DeviceWarranty.Shop.Address;
        await refModalEditShopDetails.OnShowModalEditAddShopClick();
    }

    #endregion

    protected override async Task OnInitializedAsync()
    {
        _unassignedDevicesListAsQueryable = DataService.GetUserWithUnassignedDevicesList().Result.AsQueryable();
        
        _devicesListAsQueryable = DataService.CurrentUserWithAllData.RealEstates.
        SelectMany(realEstate => realEstate.DevicesProfiles)
        .OrderBy(d => DataService.GetRealEstateByDeviceID(d.DeviceID))
        .ThenBy(d => d.DeviceID).AsQueryable();

        _realEstatesListAsQueryable = DataService.GetDbUserWithRealEstateAddressData().Result.UserProfile.RealEstates.AsQueryable();
        DataService.CheckIfFileExsist();
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        if (Tab == 1)
        {
            TabID = 1;
        }
        else if (Tab == 2)
        {
            TabID = 2;
        }
        else if (Tab == 3)
        {
            TabID = 3;
        }
        else
        {
            message = "There is no option";
        }
    }


    

}

