@page "/details/{Tab:int}"
@page "/details"


@using Microsoft.AspNetCore.Components.QuickGrid
@using MyHome.Models;
@using MyHomeBlazorApp.BlazorData;
@using MyHome;
@using MyHomeBlazorApp.Pages
@using BlazorBootstrap
@using MyHomeBlazorApp.Components
@using MyHomeBlazorApp.Components.TabComponents
@using MyHomeBlazorApp.Shared
@using MyHomeBlazorApp.Components.Modals
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.WebUtilities
@using System.Threading.Tasks
@using System.Threading
@inject NavigationManager uriHelper
@inject NavigationManager NavManager
@inject BlazorData.DataService DataService;
@inject IJSRuntime JSRuntime



<h3>Details</h3>


<TabControl TabID="TabID">
    <TabPage Text="Real Estates">
        <div class="grid">
            <Button Class="btn btn-outline-success" @onclick="OnShowModalAddNewRealEstate">Add New</Button>
            <QuickGrid tabindex="1" Items="@_realEstatesListAsQueryable">
                <TemplateColumn>
                    <div>
                        <Button Class="btn btn-outline-dark" @onclick="() => OnShowModalRealEstateClick(context.RealEstateID)">Edit</Button>
                        <Button Class="btn btn-outline-danger" @onclick="() => OnShowModalChooseOptionDeleteRealEstate(context.RealEstateID)">Delete</Button>
                    </div>
                </TemplateColumn>
                <PropertyColumn Title="ID" Property="@(r => r.RealEstateID)" Sortable="true" />
                <PropertyColumn Title="Name" Property="@(r => r.RealEstateName)" Sortable="true" />
                <PropertyColumn Title="Street Name" Property="@(r => r.Address.StreetName)" />
                <PropertyColumn Title="House Number" Property="@(r => r.Address.HouseNumber)" />
                <TemplateColumn Title="Number's Extension">
                    <NoData Text="@context.Address.HouseNumberExtension"></NoData>
                </TemplateColumn>
                <PropertyColumn Property="@(r => r.Address.City)" Sortable="true" />
                <PropertyColumn Property="@(r => r.Address.Country)" Sortable="true" />
                <PropertyColumn Title="Total Devices" Property="@(r => r.DevicesProfiles.Count())" />
            </QuickGrid>
        </div>
    </TabPage>
    <TabPage Text="Devices">
        <div class="grid">
            <Button Class="btn btn-outline-success" @onclick="OnShowModalAddNewDevice">Add New</Button>
            <QuickGrid tabindex="2" Items="@_devicesListAsQueryable">
                <TemplateColumn>
                    <div>
                        <Button Class="btn btn-outline-dark" @onclick="() => OnShowModalEditDeviceClick(context.DeviceID)">Edit</Button>
                        <Button Class="btn btn-outline-danger" @onclick="() => OnShowModalDeleteDeviceClick(context.DeviceID)">Delete</Button>
                    </div>
                </TemplateColumn>
                <TemplateColumn Title="Real Estate ID" Sortable="true" SortBy="GridSort<DeviceProfile>.ByAscending(d => DataService.GetRealEstateByDeviceID(d.DeviceID)).ThenAscending(d=>d.DeviceID)">
                    @if (DataService.GetRealEstateByDeviceID(context.DeviceID) != 0)
                    {
                        <span>@DataService.GetRealEstateByDeviceID(context.DeviceID)</span>
                    }
                </TemplateColumn>
                <PropertyColumn Title="ID" Property="@(d=>d.DeviceID)" Sortable="true" />
                <PropertyColumn Title="Name" Property="@(d => d.DeviceName)" Sortable="true" />
                <PropertyColumn Title="Produser" Property="@(d => d.DeviceProduser)" Sortable="true" />
                <PropertyColumn Title="Type" Property="@(d => d.DeviceType)" Sortable="true" />
                <PropertyColumn Title="Serial Number" Property="@(d => d.DeviceSerialNumber)" />
                <PropertyColumn Title="Model Number" Property="@(d => d.DeviceModelNumber)" />
                <PropertyColumn Title="IP Address" Property="@(d => d.IpAddress)" />
                <PropertyColumn Title="Mac Address" Property="@(d => d.MacAdrress)" />
                <TemplateColumn Title="Manual">
                    <Button class="btn-sm btn btn-outline-info" @onclick="() => Navigate(context.DeviceID)">Manual</Button>
                </TemplateColumn>
            </QuickGrid>
        </div>
    </TabPage>
    <TabPage Text="Devices Warranties">
        <div class="grid">
            <QuickGrid tabindex="3" Items="@_devicesListAsQueryable">
                <TemplateColumn>
                    <div>
                        <Button Class="btn btn-outline-dark" @onclick="() => OnShowModalEditAddDeviceWarrantyClick(context.DeviceID)">Edit</Button>
                    </div>
                </TemplateColumn>
                <TemplateColumn Title="Real Estate ID" Sortable="true" SortBy="GridSort<DeviceProfile>.ByAscending(d => DataService.GetRealEstateByDeviceID(d.DeviceID)).ThenAscending(d=>d.DeviceID)">
                    <span>@DataService.GetRealEstateByDeviceID(context.DeviceID)</span>
                </TemplateColumn>
                @* how to make output "no data" if user didn't put in details for alomst each part. Some will be *@
                <PropertyColumn Title="Device ID" Property="@(d => d.DeviceID)" Sortable="true" />
                <PropertyColumn Title="Purchase Date" Property="@(d => d.DeviceWarranty.PurchaseDate.ToShortDateString())" Sortable="true" />
                <PropertyColumn Title="Expires" Property="@(d => d.DeviceWarranty.WarrantyEnd.ToShortDateString())" Sortable="true" />
                <PropertyColumn Title="Length" Property="@(d => d.DeviceWarranty.Years)" />
                @* it would be great for user to uppload the receipts or insurances to database to make it easy to find! Other method it could be linked in the user device *@
                <TemplateColumn Title="Receipt">
                    @if (context.DeviceWarranty.ReceiptLink == "" || context.DeviceWarranty.ReceiptLink == null )
                    {
                        <Button class="btn btn-sm" href="@context.DeviceWarranty.ReceiptLink">Upload Receipt</Button>
                    }
                    else
                    {
                    <Button class="btn btn-sm" href="@context.DeviceWarranty.ReceiptLink">Receipt</Button>
                    }
                </TemplateColumn>
                <PropertyColumn Title="Extra Warranty Length" Property="@(d => d.DeviceWarranty.ExtendedWarrantyinYears)" Sortable="true" />
                @* maybe I should separate extended warranty and insurance because it is easier to track and to see what is valid *@
                <TemplateColumn Title="Extra's Receipt">
                    @if (context.DeviceWarranty.ExtraInsuranceWarrantyLink == "" || context.DeviceWarranty.ExtraInsuranceWarrantyLink == null)
                    {
                        <Button class="btn btn-sm" href="@context.DeviceWarranty.ExtraInsuranceWarrantyLink">Upload Receipt</Button>
                    }
                    else
                    {
                        <Button class="btn btn-sm" href="@context.DeviceWarranty.ExtraInsuranceWarrantyLink">Receipt</Button>
                    }
                </TemplateColumn>
            </QuickGrid>
        </div>
    </TabPage>
    <TabPage Text="Shops Details">
        <div class="grid">
            <QuickGrid tabindex="4" Items="@_devicesListAsQueryable">
                <TemplateColumn>
                    <div>
                        <Button Class="btn btn-outline-dark" @onclick="() => OnShowModalEditAddShopClick(context.DeviceID)">Edit</Button>
                    </div>
                </TemplateColumn>
                <TemplateColumn Title="Real Estate ID" Sortable="true" SortBy="GridSort<DeviceProfile>.ByAscending(d => DataService.GetRealEstateByDeviceID(d.DeviceID)).ThenAscending(d=>d.DeviceID)">
                    <span>@DataService.GetRealEstateByDeviceID(context.DeviceID)</span>
                </TemplateColumn>
                <PropertyColumn Title="Device ID" Property="@(d => d.DeviceID)" Sortable="true" />
                <PropertyColumn Title="Shop Name" Property="@(d => d.DeviceWarranty.Shop.ShopName)" Sortable="true" />
                <PropertyColumn Title="Website Adrress" Property="@(d => d.DeviceWarranty.Shop.ShopWebAddress)" Sortable="true" />
                <PropertyColumn Title="Phone Number" Property="@(d => d.DeviceWarranty.Shop.PhoneNumber)" />
                <PropertyColumn Title="Street Name" Property="@(d => d.DeviceWarranty.Shop.Address.StreetName)" />
                <PropertyColumn Title="House Number" Property="@(d => d.DeviceWarranty.Shop.Address.HouseNumber)" />
                <PropertyColumn Title="Number Extension" Property="@(d => d.DeviceWarranty.Shop.Address.HouseNumberExtension)" />
                <PropertyColumn Title="City" Property="@(d => d.DeviceWarranty.Shop.Address.City)" Sortable="true" />
                <PropertyColumn Title="Country" Property="@(d => d.DeviceWarranty.Shop.Address.Country)" Sortable="true" />
            </QuickGrid>
        </div>
    </TabPage>
    @if (DataService.UnassignedProfile.UnassignedDevicesList.Count > 0)
    {
        <TabPage Text="Unassigned Devices">
            <div class="grid">
                <QuickGrid tabindex="2" Items="DataService.UnassignedProfile.UnassignedDevicesList.AsQueryable()">
                    <TemplateColumn>
                        <div>
                            <Button Class="btn btn-outline-dark" @onclick="() => OnShowModalEditDeviceClick(context.DeviceID)">Edit</Button>
                            <Button Class="btn btn-outline-danger" @onclick="() => OnShowModalDeleteDeviceClick(context.DeviceID)">Delete</Button>
                        </div>
                    </TemplateColumn>
                    <PropertyColumn Title="ID" Property="@(d=>d.DeviceID)" Sortable="true" />
                    <PropertyColumn Title="Name" Property="@(d => d.DeviceName)" Sortable="true" />
                    <PropertyColumn Title="Produser" Property="@(d => d.DeviceProduser)" Sortable="true" />
                    <PropertyColumn Title="Type" Property="@(d => d.DeviceType)" Sortable="true" />
                    <PropertyColumn Title="Serial Number" Property="@(d => d.DeviceSerialNumber)" />
                    <PropertyColumn Title="Model Number" Property="@(d => d.DeviceModelNumber)" />
                    <PropertyColumn Title="IP Address" Property="@(d => d.IpAddress)" />
                    <PropertyColumn Title="Mac Address" Property="@(d => d.MacAdrress)" />
                    <TemplateColumn Title="Manual">
                        <Button class="btn btn-sm" href="@context.ManualBookLink">Manual</Button>
                    </TemplateColumn>
                </QuickGrid>
            </div>
        </TabPage>
    }
</TabControl>

<!--#region Edit Form Modals  -->
@* Here is the EditForm with button outside the form *@

<div>
    <ModalEditAddRealEstate @ref="@refModalEditAddRealEstate"
                            CurrentRealEstate="@currentRealEstate">
    </ModalEditAddRealEstate>
</div>

<div>
    <ModalEditAddDevice @ref="@refModalEditAddDevice"
                        CurrentDevice="@currentDevice"
                        CurrentUser="@currentUser"
                        RealEsatateIdToAddDevice="@currentRealEstate.RealEstateID">
    </ModalEditAddDevice>
</div>
<div>
    <ModalEditWarrantyDetails @ref="refModalEditWarrantyDetails"
                              CurrentDevice="@currentDevice"
                              DevicesListAsQueryable="@_devicesListAsQueryable">
    </ModalEditWarrantyDetails>
</div>
<div>
    <ModalEditShopDetails @ref="refModalEditShopDetails"
                          CurrentDevice="@currentDevice"
                          ShopAddress="@shopAddress"
                          DevicesListAsQueryable="@_devicesListAsQueryable">
    </ModalEditShopDetails>
</div>
<div>
    <ModalDeleteRealEstate @ref="refModalRealEstateDelete"
                           CurrentRealEstate="@currentRealEstate">
    </ModalDeleteRealEstate>
</div>
<div>

    <ModalReassignDevices @ref="@refModalReasignDevices"
                          SelectedRealEstateID="@SelectedRealEstateID"
                          CurrentUser="@currentUser"
                          CurrentRealEstate="@currentRealEstate">
    </ModalReassignDevices>
</div>
<div>
    <ModalConfirmDeviceDeletion @ref="refModalConfirmDeviceDeletion"
                                CurrentDeviceToDelete="@currentDevice"
                                CurrentRealEstateToDeleteFrom="@currentRealEstate">
    </ModalConfirmDeviceDeletion>
</div>
<div>
    <ModalDeleteSuccessful @ref="refModalDeleteSuccess"
                           ObjectName="@_deletedObjectName">
    </ModalDeleteSuccessful>
</div>


<!--#endregion -->
@code {

    [Parameter]
    public int Tab { get; set; }

    private int SelectedRealEstateID
    {
        get => selectedRealEstateID;
        set { selectedRealEstateID = value; }
    }
    private int TabID = 0;
    private int selectedRealEstateID = -1;
    private string _chooseOptionValue = "Choose Real Estate";
    private string? _deletedObjectName;
    private string message = "";
    private RealEstate currentChosedRealEsate = new();
    private RealEstate currentRealEstate = new();
    private Address currentRealEstateAddress = new();
    private Address shopAddress = new();
    private DeviceProfile? currentDevice { get; set; } = new();
    private UserProfile currentUser = new();
    private const string BaseApiUrl = "https://www.google.se/search?q=";
    string LastSubmitResult = "";

    IQueryable<DeviceProfile> _devicesListAsQueryable;
    IQueryable<RealEstate> _realEstatesListAsQueryable;
    IQueryable<DeviceProfile> _unassignedDevicesListAsQueryable;

    public string deviceName
    {
        get => currentDevice.DeviceName;
        set { currentDevice.DeviceName = value; }
    }

    public class ManualLinkApiService
    {
        private const string BaseApiUrl = "https://www.google.com/search?";
    }

    public static class QueryStringHelper
    {
        public static string BuildUrlWithQueryStringUsingStringConcat(string basePath, Dictionary<string, string> queryParams)
        {
            var queryString = string.Join("&", queryParams.Select(kvp => $"{kvp.Key}+{kvp.Value}+manual"));
            return $"{basePath}{queryString}";
        }
    }

    private async void Navigate(int deviceID)
    {
        currentDevice = DataService.GetDeviceById(deviceID);
        var query = new Dictionary<string, string>
    {
            { $"{currentDevice.DeviceProduser}", $"{currentDevice.DeviceModelNumber}" }
        };
        string buildedUrl = QueryStringHelper.BuildUrlWithQueryStringUsingStringConcat(BaseApiUrl, query);
        await JSRuntime.InvokeVoidAsync("open", buildedUrl, "_blank");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            refModalConfirmDeviceDeletion.onDataChanged += DeviceDataHasChanged;
            refModalConfirmDeviceDeletion.onDataChanged += OnModalDeleteSuccess;
            refModalEditAddDevice.changedDeviceListData += DeviceListDataHasChanged;
            refModalReasignDevices.onDataChanged += RealEstateDataHasChanged;
            refModalRealEstateDelete.onDataChanged += RealEstateDataHasChanged;
            refModalRealEstateDelete.onDataChanged += OnModalDeleteSuccess;

            refModalEditShopDetails.ShopDataHasChanged += ShopDataHasChanged;
            refModalEditWarrantyDetails.WarrantyDataHasChanged += WarrantyDataHasChanged;
            refModalEditAddRealEstate.realEstateDataHasChanged += RealEstateListDataHasChanged;
            refModalRealEstateDelete.onRequestReassignDevicesListToOtherRealEstate += OnModalReassignDevicesRequest;
            refModalReasignDevices.onDeleteRealEstate += OnModalRealEstateDeleteRequest;
        }
        base.OnAfterRender(firstRender);
    }

    private void RealEstateListDataHasChanged()
    {
        _realEstatesListAsQueryable = DataService.CurrentUser.RealEstates.AsQueryable();
        StateHasChanged();
    }

    private void OnModalDeleteSuccess()
    {
        refModalDeleteSuccess.OnShowModalClick();
    }

    #region Real Estate

    private ModalEditAddRealEstate refModalEditAddRealEstate = default!;
    private ModalDeleteRealEstate refModalRealEstateDelete = default!;
    private ModalReassignDevices refModalReasignDevices = default!;
    //example



    // void SortByID()
    // {
    //     _devicesListAsQueryable = _devicesListAsQueryable.OrderBy(d => DataService.GetRealEstateByDeviceID(d.DeviceID)).ThenBy(d => d.DeviceID);
    // }
    // void FilterDevices(string query)
    // {
    //     _devicesListAsQueryable = _devicesListAsQueryable.Where(i => i.DeviceName.Contains(query));
    // }


    private void RealEstateDataHasChanged()
    {
        _realEstatesListAsQueryable = DataService.CurrentUser.RealEstates.AsQueryable();
        StateHasChanged();
    }

    private void OnModalRealEstateDeleteRequest()
    {
        // currentUser = DataService.CurrentUser;
        // currentRealEstate = DataService.GetRealEstate(realEstateID);
        refModalRealEstateDelete.DeleteRealEstate_Click(true);
    }

    private async Task OnShowModalRealEstateClick(int realEstateID)
    {
        currentRealEstate = DataService.GetRealEstate(realEstateID);
        currentRealEstateAddress = currentRealEstate.Address;
        await refModalEditAddRealEstate.OnShowModalEditAddRealEstateClick();
    }

    private async Task OnShowModalAddNewRealEstate()
    {
        currentRealEstate = new();
        currentChosedRealEsate.RealEstateID = DataService.RealEstates.Max(e => e.RealEstateID) + 1;
        currentRealEstateAddress = new();
        await refModalEditAddRealEstate.OnShowModalEditAddRealEstateClick();
    }

    private async Task OnShowModalChooseOptionDeleteRealEstate(int currentRealEstateID)
    {
        currentUser = DataService.CurrentUser;
        currentRealEstate = DataService.GetRealEstate(currentRealEstateID);
        //TODO fixthis variable to give value only if after realEstate was deleted
        _deletedObjectName = currentRealEstate.RealEstateName;
        await refModalRealEstateDelete.OnShowModalDeleteRealEstateClick();
    }

    // private bool CheckIfRealEstateObjectIsEmpty()
    // {
    //     if (currentRealEstate == null || currentRealEstate.RealEstateID == 0)
    //     {
    //         _isNullOrHasNoProperties = true;
    //     }
    //     else
    //     {
    //         _isNullOrHasNoProperties = false;
    //     }

    //     return _isNullOrHasNoProperties;
    // }

    #endregion

    #region Devices

    private ModalEditAddDevice refModalEditAddDevice = default!;
    private ModalDeleteSuccessful refModalDeleteSuccess = default!;
    private ModalConfirmDeviceDeletion refModalConfirmDeviceDeletion = default!;

    private void OnModalReassignDevicesRequest(int realEstateID)
    {
        refModalReasignDevices.OnShowModalReasignDevices(realEstateID);
    }

    private void DeviceDataHasChanged()
    {
        _devicesListAsQueryable = DataService.CurrentUser.RealEstates.SelectMany(realEstate => realEstate.DevicesProfiles).AsQueryable();
        StateHasChanged();
    }

    private void DeviceListDataHasChanged()
    {
        _devicesListAsQueryable = DataService.CurrentUser.RealEstates.SelectMany(realEstate => realEstate.DevicesProfiles).AsQueryable();
        StateHasChanged();
    }

    private async Task OnShowModalDeleteDeviceClick(int deviceId)
    {
        int ChosedRealEsatateID = DataService.GetRealEstateByDeviceID(deviceId);
        currentRealEstate = DataService.GetRealEstate(ChosedRealEsatateID);
        currentDevice = DataService.GetDeviceById(deviceId);
        _deletedObjectName = currentDevice.DeviceName;
        await refModalConfirmDeviceDeletion.OnShowModalClick();
    }



    private async Task OnShowModalAddNewDevice()
    {
        currentUser = DataService.CurrentUser;
        currentDevice = new();
        await refModalEditAddDevice.OnShowModalEditDeviceClick();
    }

    private async Task OnShowModalEditDeviceClick(int deviceID)
    {
        currentRealEstate.RealEstateID = DataService.GetRealEstateByDeviceID(deviceID);
        currentUser = DataService.CurrentUser;
        currentDevice = DataService.GetDeviceById(deviceID);
        await refModalEditAddDevice.OnShowModalEditDeviceClick();
    }

    #endregion

    #region Warranties

    private ModalEditWarrantyDetails refModalEditWarrantyDetails = default!;

    private void WarrantyDataHasChanged()
    {
        _realEstatesListAsQueryable = DataService.CurrentUser.RealEstates.AsQueryable();
        StateHasChanged();
    }

    private async Task OnShowModalEditAddDeviceWarrantyClick(int deviceID)
    {
        currentDevice = DataService.GetDeviceById(deviceID);
        await refModalEditWarrantyDetails.OnShowModalEditWarrantyClick();
    }

    #endregion

    #region Shops

    private ModalEditShopDetails refModalEditShopDetails = default!;

    private void ShopDataHasChanged()
    {
        _realEstatesListAsQueryable = DataService.CurrentUser.RealEstates.AsQueryable();
        StateHasChanged();
    }

    private async Task OnShowModalEditAddShopClick(int deviceID)
    {
        currentDevice = DataService.GetDeviceById(deviceID);
        shopAddress = currentDevice.DeviceWarranty.Shop.Address;
        await refModalEditShopDetails.OnShowModalEditAddShopClick();
    }

    #endregion

    protected override void OnInitialized()
    {
        // It does not change nothing if I assign QuickGrid item directly to DataService.
        _devicesListAsQueryable = DataService.CurrentUser.RealEstates.SelectMany(realEstate => realEstate.DevicesProfiles).OrderBy(d => DataService.GetRealEstateByDeviceID(d.DeviceID)).ThenBy(d => d.DeviceID).AsQueryable();
        _realEstatesListAsQueryable = DataService.CurrentUser.RealEstates.AsQueryable();
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        if (Tab == 1)
        {
            TabID = 1;
        }
        else if (Tab == 2)
        {
            TabID = 2;
        }
        else if (Tab == 3)
        {
            TabID = 3;
        }
        else
        {
            message = "There is no option";
        }
    }


    // // // // // // // //


    // moved to validation method to keep one button
    // public async Task AddOrSave()
    // {
    //     if (currentRealEstate == null || currentRealEstate.RealEstateID == 0)
    //     {
    //         currentRealEstate.Address = currentRealEstateAddress;
    //         DataService.AddNewRealEstate(currentRealEstate);
    //     }
    //     else
    //     {
    //         DataService.SaveUpdatedRealEstate();
    //     }
    //     await refModalEditAddRealEstate.HideAsync();
    // }

    // Void or async Task?

    // private void OnModalDeviceWarrantyNext()
    // {
    //     currentDevice = DataService.Devices.First(d => d.DeviceID == currentDevice.DeviceID + 1);
    // }

    // private void OnModalDeviceWarrantyPreviuos()
    // {
    //     currentDevice = DataService.Devices.First(d => d.DeviceID == currentDevice.DeviceID - 1);
    // }

    // private void OnModalDeviceShopNext()
    // {
    //     currentDevice = DataService.Devices.First(d => d.DeviceID == currentDevice.DeviceID + 1);
    // }

    // private void OnModalDeviceShopPreviuos()
    // {
    //     currentDevice = DataService.Devices.First(d => d.DeviceID == currentDevice.DeviceID - 1);
    // }
}

