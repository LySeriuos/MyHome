@page "/details/{Tab:int}"
@page "/details"


@using Microsoft.AspNetCore.Components.QuickGrid
@using MyHome.Models;
@using MyHomeBlazorApp.BlazorData;
@using MyHome;
@using MyHomeBlazorApp.Pages

@using BlazorBootstrap
@inject NavigationManager uriHelper;
@inject BlazorData.DataService DataService;



<h3>Details</h3>

<div class="row">
    <div class="col mb-3">
        <Button Class="joinBtn" @onclick="ShowRealEstatesTable">Real Estates Details</Button>
        <Button Class="joinBtn" @onclick="ShowDevicesTable">Devices Details</Button>
        <Button Class="joinBtn" @onclick="ShowWarrantiesTable">Warranties Details</Button>
        <Button Class="joinBtn" @onclick="ShowShopsTable">Shops Details</Button>
        @if (DataService.UnassignedProfile.UnassignedDevicesList.Count > 0)
        {
            <Button Class="joinBtn" @onclick="ShowUnassignedTable">Unassigned Devices</Button>
        }
    </div>
</div>

@if (_showRealEstatesTableVisible)
{
    <div class="grid">
        <QuickGrid tabindex="1" Items="@DataService.RealEstates.AsQueryable()">
            @* Here is "edit" button, but there are two different forms: Real Estate and Address. For logic reason these two should be combined as one editable form*@
            <TemplateColumn>
                <div>
                    <Button Class="btn btn-outline-dark" @onclick="() => OnShowModalRealEstateClick(context.RealEstateID)">Edit</Button>
                    <Button Class="btn btn-outline-danger" @onclick="() => OnShowModalDeleteRealEstate(context.RealEstateID)">Delete</Button>
                </div>
            </TemplateColumn>
            @* getting error here, need if statement to check if value is not empty I can just add values to the address class but it is unnecessary *@

            <PropertyColumn Title="ID" Property="@(r => r.RealEstateID)" Sortable="true" />
            <PropertyColumn Title="Name" Property="@(r => r.RealEstateName)" Sortable="true" />
            <PropertyColumn Title="Street Name" Property="@(r => r.Address.StreetName)" />
            <PropertyColumn Title="House Number" Property="@(r => r.Address.HouseNumber)" />
            <TemplateColumn Title="Number's Extension">
                <NoData Text="@context.Address.HouseNumberExtension"></NoData>
            </TemplateColumn>
            <PropertyColumn Property="@(r => r.Address.City)" Sortable="true" />
            <PropertyColumn Property="@(r => r.Address.Country)" Sortable="true" />
            <PropertyColumn Title="Total Devices" Property="@(r => r.DevicesProfiles.Count())" />
        </QuickGrid>
    </div>
}

@if (_showDevicesTableVisible)
{
    <div class="grid">
        <QuickGrid tabindex="2" Items="@DataService.CurrentUser.RealEstates.SelectMany(realEstate => realEstate.DevicesProfiles).AsQueryable()">
            @* Here is "edit" button, but there are two different forms: Real Estate and Address. For logic reason these two should be combined as one editable form*@
            <TemplateColumn>
                <div>
                    <Button Class="btn btn-outline-dark" @onclick="() => OnShowModalEditAddDeviceClick(context.DeviceID)">Edit</Button>
                    <Button Class="btn btn-outline-danger">Delete</Button>
                </div>
            </TemplateColumn>

            <TemplateColumn Title="Real Estate ID">
                @if (DataService.GetRealEstateByDeviceID(context.DeviceID) != 0)
                {
                    <span>@DataService.GetRealEstateByDeviceID(context.DeviceID)</span>
                }
            </TemplateColumn>            
                <PropertyColumn Title="ID" Property="@(d=>d.DeviceID)" Sortable="true" />
                <PropertyColumn Title="Name" Property="@(d => d.DeviceName)" Sortable="true" />
                <PropertyColumn Title="Produser" Property="@(d => d.DeviceProduser)" Sortable="true" />
                <PropertyColumn Title="Type" Property="@(d => d.DeviceType)" Sortable="true" />
                <PropertyColumn Title="Serial Number" Property="@(d => d.DeviceSerialNumber)" />
                <PropertyColumn Title="Model Number" Property="@(d => d.DeviceModelNumber)" />
                <PropertyColumn Title="IP Address" Property="@(d => d.IpAddress)" />
                <PropertyColumn Title="Mac Address" Property="@(d => d.MacAdrress)" />
                <TemplateColumn Title="Manual">
                    <Button class="btn btn-sm" href="@context.ManualBookLink">Manual</Button>
                </TemplateColumn>
                <PropertyColumn Title="Warranty Expires" Property="@(d => d.DeviceWarranty.WarrantyEnd.ToShortDateString())" Sortable="true" />            
        </QuickGrid>
    </div>
}

@if (_showWarrantiesTableVisible)
{
    <div class="grid">
        <QuickGrid tabindex="3" Items="@DataService.CurrentUser.RealEstates.SelectMany(realEstate => realEstate.DevicesProfiles).AsQueryable()">
            @* Here is "edit" button, but there are two different forms: Real Estate and Address. For logic reason these two should be combined as one editable form*@
            <TemplateColumn>
                <div>
                    <Button Class="btn btn-outline-dark" @onclick="() => OnShowModalEditAddDeviceWarrantyClick(context.DeviceID)">Edit</Button>
                    <Button Class="btn btn-outline-danger">Delete</Button>
                </div>
            </TemplateColumn>
            <TemplateColumn Title="Real Estate ID">
                <span>@DataService.GetRealEstateByDeviceID(context.DeviceID)</span>
            </TemplateColumn>
            @* how to make output "no data" if user didn't put in details for alomst each part. Some will be *@
            <PropertyColumn Title="Device ID" Property="@(d => d.DeviceID)" Sortable="true" />
            <PropertyColumn Title="Purchase Date" Property="@(d => d.DeviceWarranty.PurchaseDate.ToShortDateString())" Sortable="true" />
            <PropertyColumn Title="Expires" Property="@(d => d.DeviceWarranty.WarrantyEnd.ToShortDateString())" Sortable="true" />
            <PropertyColumn Title="Length (Days)" Property="@(d => d.DeviceWarranty.WarrantyPeriod.TotalDays)" />
            @* it would be great for user to uppload the receipts or insurances to database to make it easy to find! Other method it could be linked in the user device *@
            <TemplateColumn Title="Receipt">
                <Button class="btn btn-sm" href="@context.DeviceWarranty.ReceiptLink">Receipt</Button>
            </TemplateColumn>
            <PropertyColumn Title="Extra Warranty Length (Days)" Property="@(d => d.DeviceWarranty.ExtraInsuranceWarrantyLenght.TotalDays)" Sortable="true" />
            @* maybe I should separate extended warranty and insurance because it is easier to track and to see what is valid *@
            <TemplateColumn Title="Extra's Receipt">
                <Button class="btn btn-sm" href="@context.DeviceWarranty.ReceiptLink">Receipt</Button>
            </TemplateColumn>
        </QuickGrid>
    </div>
}

@if (_showShopsTableVisible)
{
    <div class="grid">
        <QuickGrid tabindex="4" Items="@DataService.CurrentUser.RealEstates.SelectMany(realEstate => realEstate.DevicesProfiles).AsQueryable()">
            @* Here is "edit" button, but there are two different forms: Real Estate and Address. For logic reason these two should be combined as one editable form*@
            <TemplateColumn>
                <div>
                    <Button Class="btn btn-outline-dark" @onclick="() => OnShowModalEditAddShopClick(context.DeviceID)">Edit</Button>
                    <Button Class="btn btn-outline-danger">Delete</Button>
                </div>
            </TemplateColumn>
            <TemplateColumn Title="Real Estate ID">
                <span>@DataService.GetRealEstateByDeviceID(context.DeviceID)</span>
            </TemplateColumn>
            @* how to make output "no data" if user didn't put in details for alomst each part. Some will be *@
            <PropertyColumn Title="Device ID" Property="@(d => d.DeviceID)" Sortable="true" />
            <PropertyColumn Title="Shop Name" Property="@(d => d.DeviceWarranty.Shop.ShopName)" Sortable="true" />
            <PropertyColumn Title="Website Adrress" Property="@(d => d.DeviceWarranty.Shop.ShopWebAddress)" Sortable="true" />
            <PropertyColumn Title="Phone Number" Property="@(d => d.DeviceWarranty.Shop.PhoneNumber)" />
            <PropertyColumn Title="Street Name" Property="@(d => d.DeviceWarranty.Shop.Address.StreetName)" />
            <PropertyColumn Title="House Number" Property="@(d => d.DeviceWarranty.Shop.Address.HouseNumber)" />
            <PropertyColumn Title="Number Extension" Property="@(d => d.DeviceWarranty.Shop.Address.HouseNumberExtension)" />
            <PropertyColumn Title="City" Property="@(d => d.DeviceWarranty.Shop.Address.City)" Sortable="true" />
            <PropertyColumn Title="Country" Property="@(d => d.DeviceWarranty.Shop.Address.Country)" Sortable="true" />
        </QuickGrid>
    </div>
}

@if (_showUnassignedTableVisible)
{
    <div class="grid">
        <QuickGrid tabindex="2" Items="@DataService.UnassignedProfile.UnassignedDevicesList.AsQueryable()">
            @* Here is "edit" button, but there are two different forms: Real Estate and Address. For logic reason these two should be combined as one editable form*@
            <TemplateColumn>
                <div>
                    <Button Class="btn btn-outline-dark" @onclick="() => OnShowModalEditAddDeviceClick(context.DeviceID)">Edit</Button>
                    <Button Class="btn btn-outline-danger">Delete</Button>
                </div>
            </TemplateColumn>
            @* how to make output "no data" if user didn't put in details for alomst each part. Some will be   *@
            <PropertyColumn Title="ID" Property="@(d=>d.DeviceID)" Sortable="true" />
            <PropertyColumn Title="Name" Property="@(d => d.DeviceName)" Sortable="true" />
            <PropertyColumn Title="Produser" Property="@(d => d.DeviceProduser)" Sortable="true" />
            <PropertyColumn Title="Type" Property="@(d => d.DeviceType)" Sortable="true" />
            <PropertyColumn Title="Serial Number" Property="@(d => d.DeviceSerialNumber)" />
            <PropertyColumn Title="Model Number" Property="@(d => d.DeviceModelNumber)" />
            <PropertyColumn Title="IP Address" Property="@(d => d.IpAddress)" />
            <PropertyColumn Title="Mac Address" Property="@(d => d.MacAdrress)" />
            <TemplateColumn Title="Manual">
                <Button class="btn btn-sm" href="@context.ManualBookLink">Manual</Button>
            </TemplateColumn>
            <PropertyColumn Title="Warranty Expires" Property="@(d => d.DeviceWarranty.WarrantyEnd.ToShortDateString())" Sortable="true" />
        </QuickGrid>
    </div>
}


<!--#region Edit Form Modals  -->

<div class="row">
    <Modal @ref="modalRealEstate" Title="Edit Real Estate Address">
        <BodyTemplate>
            <EditForm Model="DataService.RealEstates">
                <div class="form-group row">
                    <label for="realEstateName" class="col-sm-2 col-form-label">
                        Real Estate Name
                    </label>
                    <div class="col-sm-10">
                        <InputText id="realEstateName" class="form-control" placeholder="Real Estate Name"
                                   @bind-Value="currentRealEstate.RealEstateName" />
                    </div>
                </div>
            </EditForm>
            <AddressComponent CurrentObjectAddress="@currentRealEstateAddress" />
        </BodyTemplate>
        <FooterTemplate>
            @if (currentRealEstate.RealEstateID != DataService.RealEstates.First().RealEstateID)
            {
                <Button Color="ButtonColor.Primary" @onclick="OnModalRealEstatePreviuos">Previuos</Button>
            }
            @if (currentRealEstate.RealEstateID != DataService.RealEstates.Last().RealEstateID)
            {
                <Button Color="ButtonColor.Primary" @onclick="OnModalRealEstateNext">Next</Button>
            }
            <Button Color="ButtonColor.Primary" @onclick="OnHideModalRealEstateClick">Close</Button>
            <Button Color="ButtonColor.Primary">Save changes</Button>
        </FooterTemplate>
    </Modal>
</div>
<div class="row">
    @* Maybe it is good to do two separate modals, one for new device and other for device editing *@
    <Modal @ref="modalEditAddDevice" Title="Edit Device Details">
        <BodyTemplate>
            <AddEditDeviceComponent Device="@currentDevice" />
        </BodyTemplate>
        <FooterTemplate>
            @if (currentDevice.DeviceID != DataService.Devices.First().DeviceID)
            {
                <Button Color="ButtonColor.Primary" @onclick="OnModalDevicePreviuos">Previuos</Button>
            }

            @if (currentDevice.DeviceID != DataService.Devices.Last().DeviceID)
            {
                <Button Color="ButtonColor.Primary" @onclick="OnModalDeviceNext">Next</Button>
            }
            <Button Color="ButtonColor.Primary" @onclick="OnHideModalEditAddDeviceClick">Close</Button>
            <Button Color="ButtonColor.Primary">Save changes</Button>
        </FooterTemplate>
    </Modal>
</div>
<div class="row">
    @* Maybe it is good to do two separate modals, one for new device and other for device editing *@
    <Modal @ref="modalEditAddDeviceWarranty" Title="Edit Warranty Details">
        <BodyTemplate>
            <AddEditWarrantyDetails CurrentDevice="@currentWarrantyDevice" />
        </BodyTemplate>
        <FooterTemplate>
            @if (currentWarrantyDevice.DeviceID != DataService.Devices.First().DeviceID)
            {
                <Button Color="ButtonColor.Primary" @onclick="OnModalDeviceWarrantyPreviuos">Previuos</Button>
            }

            @if (currentWarrantyDevice.DeviceID != DataService.Devices.Last().DeviceID)
            {
                <Button Color="ButtonColor.Primary" @onclick="OnModalDeviceWarrantyNext">Next</Button>
            }
            <Button Color="ButtonColor.Primary" @onclick="OnHideModalEditAddDeviceWarrantyClick">Close</Button>
            <Button Color="ButtonColor.Primary">Save changes</Button>
        </FooterTemplate>
    </Modal>
</div>


<div class="row">
    @* Maybe it is good to do two separate modals, one for new device and other for device editing *@
    <Modal @ref="modalEditAddShopDetails" Title="Edit Shop Details">
        <BodyTemplate>
            <AddEditShopDetailsComponent CurrentDevice="@currentShopDetails" />
            <AddressComponent CurrentObjectAddress="@shopAddress" />
        </BodyTemplate>
        <FooterTemplate>
            @if (currentShopDetails.DeviceID != DataService.Devices.First().DeviceID)
            {
                <Button Color="ButtonColor.Primary" @onclick="OnModalDeviceShopPreviuos">Previuos</Button>
            }

            @if (currentShopDetails.DeviceID != DataService.Devices.Last().DeviceID)
            {
                <Button Color="ButtonColor.Primary" @onclick="OnModalDeviceShopNext">Next</Button>
            }
            <Button Color="ButtonColor.Primary" @onclick="OnHideModalEditAddShopClick">Close</Button>
            <Button Color="ButtonColor.Primary">Save changes</Button>
        </FooterTemplate>
    </Modal>
</div>

<div>
    <Modal @ref="modalRealEstateDelete" Title="Delete Confirm" ShowCloseButton>
        <BodyTemplate>
            <p class="text-danger">Attention! If you will delete this RealEsatate it´s devices will be removed too!</p>
            <p>Are you sure you want to delete @currentRealEstate.RealEstateName together with Devices?</p>
        </BodyTemplate>
        <FooterTemplate>
            <Button @onclick="()=> OnShowModalReasignDevices(currentRealEstate.RealEstateID)">Delete Only Real Estate</Button>
            <Button @onclick="()=> DeleteRealEstate_Click(true)">Delete With Devices</Button>
            <Button @onclick="()=> OnHideModalCloseClick()">Cancel</Button>
        </FooterTemplate>
    </Modal>
</div>
<div>
    <Modal @ref="modalReasignDevices" Title="Devices Reassigning">
        <BodyTemplate>
            <div>
                <div class="row">
                    <ul>
                        <li>
                            This option will let you move all devices from removed Real Estate to another.
                        </li>
                    </ul>
                    <p>Choose Real Estate to move your devices:</p>
                </div>
                <div class="row">
                    <select class="form-control form-select" @bind="@SelectedRealEstateID">
                        <Button data-toggle="dropdown"></Button>
                        <option selected disabled value="-1">@_chooseOptionValue</option>
                        @foreach (RealEstate r in currentUser.RealEstates)
                        {
                            if (r.RealEstateID != currentRealEstate.RealEstateID && r.RealEstateID != 0)
                            {
                                <option value="@r.RealEstateID"> @r.RealEstateName </option>
                            }
                            else
                            {
                                continue;
                            }
                        }

                    </select>
                </div>
                <div class="row">
                    @if (currentUser.RealEstates.Count > 1)
                    {
                        <Button @onclick="()=>MoveDevicesListToOtherRealEstate(SelectedRealEstateID, currentRealEstate)">Move Devices</Button>
                    }
                    else
                    {
                        <Button Disabled>Move Devices</Button>
                    }
                </div>
                <br />
                <div class="row">
                    <ul>
                        <li>
                            This option will let you leave unassignded devices and move them later to any Real Estate you have.
                        </li>
                    </ul>
                </div>
                <div class="row">
                    <Button @onclick="()=>LeaveDevicesUnassigned(currentRealEstate)">Keep Devices Unassigned</Button>
                </div>
                <br />
                <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                    <Button @onclick="OnShowModalReasignDevicesClose">Cancel</Button>
                </div>
            </div>
        </BodyTemplate>
    </Modal>
</div>



<!--#endregion -->
@code {
    [Parameter]
    public int Tab { get; set; }

    [Parameter]
    public int SelectedRealEstateID
    {
        get => selectedRealEstateID;
        set { selectedRealEstateID = value; }
    }

    private string _chooseOptionValue = "Choose Real Estate";
    private int selectedRealEstateID = -1;
    private RealEstate currentRealEstateToChoose = new();
    private Address currentRealEstateAddress = new();
    private DeviceProfile currentDevice = new();
    private DeviceProfile currentWarrantyDevice = new();
    private DeviceProfile currentShopDetails = new();
    private RealEstate currentRealEstate = new();
    private UserProfile currentUser = new();
    private Address shopAddress = new();

    bool _showRealEstatesTableVisible = true;
    bool _showDevicesTableVisible = false;
    bool _showWarrantiesTableVisible = false;
    bool _showShopsTableVisible = false;
    bool _showUnassignedTableVisible = false;

    private async Task MoveDevicesListToOtherRealEstate(int SelectedRealEstateID, RealEstate currentRealEstate)
    {
        if (currentRealEstate != null && SelectedRealEstateID > 0)
        {
            DataService.MoveDeviceListToOtherRealEstate(SelectedRealEstateID, currentRealEstate);
            await DeleteRealEstate_Click(true);
        }
        else
        {
            return;
        }
        await OnShowModalReasignDevicesClose();
    }

    private async Task LeaveDevicesUnassigned(RealEstate currentRealEstate)
    {
        if (currentRealEstate != null)
        {
            DataService.LeaveDevicesUnassigned(currentRealEstate);
            await DeleteRealEstate_Click(true);
        }
        await OnShowModalReasignDevicesClose();
    }

    public static void GetTheValue(int id)
    {
        int selectedRealEstate = new();
        selectedRealEstate = id;
    }

    private Modal modalReasignDevices = default!;

    private async Task OnShowModalReasignDevices(int currentRealEstateID)
    {
        await modalReasignDevices.ShowAsync();
    }

    private async Task OnShowModalReasignDevicesClose()
    {
        await modalReasignDevices.HideAsync();
    }

    private async Task DeleteRealEstate_Click(bool _confirmDeletion)
    {
        if (_confirmDeletion == true)
        {
            // manualy assigned value!
            UserProfile? currentUser = DataService.CurrentUser;
            RealEstate? realEstateToDelete = new();
            if (currentUser == null)
            {
                // should be message that realEstate doesn't exist.
                return;
            }
            else
            {
                realEstateToDelete = currentUser.RealEstates.FirstOrDefault(r => r.RealEstateID == currentRealEstate.RealEstateID);
            }

            if (realEstateToDelete == null)
            {
                return;
            }
            else
            {
                DataService.RemoveRealEstate(realEstateToDelete.RealEstateID);
            }
        }
        await OnHideModalCloseClick();
    }

    private Modal modalRealEstateDelete = default!;

    private async Task OnShowModalDeleteRealEstate(int currentRealEstateID)
    {
        currentUser = DataService.CurrentUser;
        currentRealEstate = DataService.RealEstates.First(r => r.RealEstateID == currentRealEstateID);
        await modalRealEstateDelete.ShowAsync();
    }

    private async Task OnHideModalCloseClick()
    {
        await modalRealEstateDelete.HideAsync();
    }

    private void ShowRealEstatesTable()
    {
        _showRealEstatesTableVisible = !_showRealEstatesTableVisible;
        _showDevicesTableVisible = false;
        _showWarrantiesTableVisible = false;
        _showShopsTableVisible = false;
        _showUnassignedTableVisible = false;
    }
    private void ShowDevicesTable()
    {
        _showDevicesTableVisible = !_showDevicesTableVisible;
        _showWarrantiesTableVisible = false;
        _showShopsTableVisible = false;
        _showRealEstatesTableVisible = false;
        _showUnassignedTableVisible = false;
    }
    private void ShowWarrantiesTable()
    {
        _showWarrantiesTableVisible = !_showWarrantiesTableVisible;
        _showShopsTableVisible = false;
        _showRealEstatesTableVisible = false;
        _showDevicesTableVisible = false;
        _showUnassignedTableVisible = false;
    }
    private void ShowShopsTable()
    {
        _showShopsTableVisible = !_showShopsTableVisible;
        _showRealEstatesTableVisible = false;
        _showDevicesTableVisible = false;
        _showWarrantiesTableVisible = false;
        _showUnassignedTableVisible = false;
    }

    private void ShowUnassignedTable()
    {
        _showUnassignedTableVisible = !_showUnassignedTableVisible;
        _showRealEstatesTableVisible = false;
        _showDevicesTableVisible = false;
        _showWarrantiesTableVisible = false;
        _showShopsTableVisible = false;
    }

    private string message = "";
    protected override void OnParametersSet()
    {
        if (Tab == 1)
        {
            _showRealEstatesTableVisible = false;
            ShowRealEstatesTable();
        }
        else if (Tab == 2)
        {
            ShowDevicesTable();
        }
        else if (Tab == 3)
        {
            ShowWarrantiesTable();
        }
        else
        {
            message = "There is no option";
        }
    }

    private Modal modalRealEstate = default!;
    private async Task OnShowModalRealEstateClick(int id)
    {
        currentRealEstate = DataService.RealEstates.First(r => r.RealEstateID == id);
        currentRealEstateAddress = currentRealEstate.Address;
        await modalRealEstate.ShowAsync();
    }

    private async Task OnHideModalRealEstateClick()
    {
        await modalRealEstate.HideAsync();
    }

    private Modal modalEditAddDevice = default!;

    private async Task OnShowModalEditAddDeviceClick(int id)
    {
        currentDevice = DataService.Devices.First(d => d.DeviceID == id);
        await modalEditAddDevice.ShowAsync();
    }

    private async Task OnHideModalEditAddDeviceClick()
    {
        await modalEditAddDevice.HideAsync();
    }

    private Modal modalEditAddDeviceWarranty = default!;

    private async Task OnShowModalEditAddDeviceWarrantyClick(int id)
    {
        currentWarrantyDevice = DataService.Devices.First(d => d.DeviceID == id);
        await modalEditAddDeviceWarranty.ShowAsync();
    }

    private async Task OnHideModalEditAddDeviceWarrantyClick()
    {
        await modalEditAddDeviceWarranty.HideAsync();
    }

    private Modal modalEditAddShopDetails = default!;

    private async Task OnShowModalEditAddShopClick(int id)
    {
        currentShopDetails = DataService.Devices.First(d => d.DeviceID == id);
        shopAddress = currentShopDetails.DeviceWarranty.Shop.Address;
        await modalEditAddShopDetails.ShowAsync();
    }

    private async Task OnHideModalEditAddShopClick()
    {
        await modalEditAddShopDetails.HideAsync();
    }

    // Void or async Task?
    private void OnModalRealEstateNext()
    {
        currentRealEstate = DataService.RealEstates.First(r => r.RealEstateID == currentRealEstate.RealEstateID + 1);
        currentRealEstateAddress = currentRealEstate.Address;
    }

    private void OnModalRealEstatePreviuos()
    {
        currentRealEstate = DataService.RealEstates.First(r => r.RealEstateID == currentRealEstate.RealEstateID - 1);
        currentRealEstateAddress = currentRealEstate.Address;
    }

    private void OnModalDeviceNext()
    {
        if (currentDevice != null)
        {
            currentDevice = DataService.Devices.First(d => d.DeviceID == currentDevice.DeviceID + 1);
        }
    }

    private void OnModalDevicePreviuos()
    {
        if (currentDevice != null)
        {
            currentDevice = DataService.Devices.First(d => d.DeviceID == currentDevice.DeviceID - 1);
        }
    }

    private void OnModalDeviceWarrantyNext()
    {
        currentWarrantyDevice = DataService.Devices.First(d => d.DeviceID == currentWarrantyDevice.DeviceID + 1);
    }

    private void OnModalDeviceWarrantyPreviuos()
    {
        currentWarrantyDevice = DataService.Devices.First(d => d.DeviceID == currentWarrantyDevice.DeviceID - 1);
    }

    private void OnModalDeviceShopNext()
    {
        currentShopDetails = DataService.Devices.First(d => d.DeviceID == currentShopDetails.DeviceID + 1);
    }

    private void OnModalDeviceShopPreviuos()
    {
        currentShopDetails = DataService.Devices.First(d => d.DeviceID == currentShopDetails.DeviceID - 1);
    }





}
