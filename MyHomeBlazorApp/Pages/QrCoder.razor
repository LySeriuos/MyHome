@page "/QrCoder"

@using MyHome.Models;
@using MyHome;
@using MyHomeBlazorApp.BlazorData
@using MyHomeBlazorApp.Components.TabComponents
@using MyHomeBlazorApp.Pages
@using System.ComponentModel.DataAnnotations
@using MyHomeBlazorApp.Components
@using static QRCoder.PayloadGenerator
@inject BlazorData.DataService DataService
@inject IJSRuntime JSRuntime
@inject NavigationManager uriHelper
@inject NavigationManager NavManager
@inject SignInManager<MyHomeBlazorAppUser> SignInManager
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<MyHomeBlazorAppUser> UserManager

<style>
    
    .card-outline-style {
        outline-width: 5px;
        outline-style: double;
        outline-color: darkgoldenrod;
    }

    .card-style {
        display: flex;
        justify-content: center;
        background-color: #eeeff4;
        width: 18rem;
        margin-right: 50px;
        margin-top: 50px;
    }

    .card-btn {
        color: #2d2a2b;
        background-color: #cfd9e1;
        border-color: #1861ac;
        border-radius: 1.3rem;
    }

        .card-btn:hover {
            padding-left: 1rem;
            padding-right: 1rem;
            font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;
            background: #e2c8c0;
            color: #2d2a2b;
        }

    bi.bi-eye:before {
        content: '\e345';
        font-family: e-icons;
        font-size: 13px;
    }
</style>
<body>
<div>
    <Card Class="card-style d-flex" Style="width:18rem;">
        <CardBody>
            <CardTitle>Create Wifi Connection Qr Code </CardTitle>
            <EditForm Model="wifiModel" class="my-5" OnSubmit="HandleWifiSharingQrCode">
                <DataAnnotationsValidator />
                <div class="my-2 ms-3">
                    <label class="form-check-label" for="wifiName">
                        Wifi Name
                    </label>
                    <InputText id="wifiName" @bind-Value="wifiModel.WifiName"></InputText>
                    <ValidationMessage For="() => wifiModel.WifiName" class="text-danger d-block" />
                </div>

                <div class="my-2 ms-3">
                    <label class="form-check-label" for="wifiPassword">
                        Wifi Pasword
                    </label>
                    <InputText type="@TxtType" name="password" id="wifiPassword" @bind-Value="wifiModel.WifiPassword"></InputText>
                    <span class="e-input-eye" @onclick="ShowPassword"><i class="@changedClass" style="font-size: 1.2rem; color: black;"></i></span>

                    <ValidationMessage For="() => wifiModel.WifiPassword" class="text-danger d-block" />
                </div>
                <br />
                <div class="text-center">
                    <Button Color="ButtonColor.Primary" Type="ButtonType.Submit" Class="btn card-btn btn-rounded text-center">Create Wifi Qr Code</Button>
                </div>
                
            </EditForm>
        </CardBody>
    </Card>
</div>
</body>
@code {
    private DeviceProfile _selectedDeviceProfile { get; set; } = new();
    private WifiModel wifiModel = new();
    private EditContext? editWifiContext;
    private EditContext? editDeviceContext;
    [Parameter]
    public int _chosedDeviceID { get; set; }
    [Parameter]
    public UserProfile currentUser { get; set; } = new();
    bool valid;

    public class WifiModel
    {
        private string _wifiName = "";
        [Required(ErrorMessage = "Wifi Name is mandatory")]
        [MinLength(4)]
        public string WifiName
        {
            get { return _wifiName; }
            set { _wifiName = value; }
        }

        private string _wifiPassword = "";
        [Required(ErrorMessage = "Password is mandatory")]
        [MinLength(8)]
        public string WifiPassword
        {
            get { return _wifiPassword; }
            set { _wifiPassword = value; }
        }
    }

    public string TxtType = "password";
    public string changedClass = "bi bi-eye-slash";
    public void ShowPassword()
    {
        if (this.TxtType == "password")
        {
            this.TxtType = "text";
            changedClass = "bi bi-eye";
        }
        else
        {
            this.TxtType = "password";
            changedClass = "bi bi-eye-slash";
        }
    }

    private void SetSelectedDeviceProfile(int deviceID)
    {
        _selectedDeviceProfile = DataService.GetDeviceById(deviceID);
    }


    private async Task HandleQrCode(EditContext editContext)
    {
        _selectedDeviceProfile = DataService.GetDeviceById(_chosedDeviceID);
        Directory.CreateDirectory($"{Environment.CurrentDirectory}\\files\\{currentUser.UserID}\\qrCodes");
        string filePath = $"{Environment.CurrentDirectory}\\files\\{currentUser.UserID}\\qrCodes\\DeviceID{_selectedDeviceProfile.DeviceID.ToString()}.png";
        Logic.CreateQrCodeLinkToDevice(_selectedDeviceProfile.DeviceID.ToString(), currentUser.UserID.ToString(), filePath);
        var file = Path.GetFileName(filePath);
        string fileUrl = $"files/{currentUser.UserID}/qrCodes/{file}";
        await JSRuntime.InvokeVoidAsync("open", fileUrl, "_blank");
        _chosedDeviceID = new();
        StateHasChanged();
    }

    private async void HandleWifiSharingQrCode(EditContext editWifiContext)
    {
        Directory.CreateDirectory($"{Environment.CurrentDirectory}\\files\\{currentUser.UserID}\\WifiQrCode");
        string filePath = $"{Environment.CurrentDirectory}\\files\\{currentUser.UserID}\\WifiQrCode\\Wifi.png";
        valid = editWifiContext.Validate();
        currentUser = DataService.CurrentUserWithAllData;
        if (valid == true)
        {
            valid = editWifiContext.Validate();
            Logic.CreateWifiSharingQrCode(wifiModel.WifiName, wifiModel.WifiPassword, filePath);
            var file = Path.GetFileName(filePath);
            string fileUrl = $"files/{currentUser.UserID}/WifiQrCode/{file}";
            await JSRuntime.InvokeVoidAsync("open", fileUrl, "_blank");
        }
        else
        {
            return;
        }
        wifiModel = new();
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        currentUser = DataService.CurrentUserWithAllData;
        editWifiContext = new(wifiModel);
        editDeviceContext = new(_selectedDeviceProfile);
        base.OnInitializedAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            editWifiContext.Validate();
    }

}
