@page "/QrCoder"

@using MyHome.Models;
@using MyHome;
@using MyHomeBlazorApp.BlazorData
@using MyHomeBlazorApp.Pages
@using System.ComponentModel.DataAnnotations
@using static QRCoder.PayloadGenerator
@inject BlazorData.DataService DataService
@inject IJSRuntime JSRuntime
@inject NavigationManager uriHelper
@inject NavigationManager NavManager
@inject SignInManager<MyHomeBlazorAppUser> SignInManager
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<MyHomeBlazorAppUser> UserManager

<h3>QrCoder</h3>

<h5>Generate link to Device QrCode </h5>

<EditForm Model="@_selectedDeviceProfile" OnSubmit="HandleQrCode" FormName="QrC">
    <label class="form-label">Choose Device</label>
    <InputSelect @bind-Value="_chosedDeviceID">
        <option selected disabled value="-1">Select Device...</option>
        @foreach (var device in DataService.CurrentUser.GetAllDevices())
        {
            <option value="@device.DeviceID">@device.DeviceName</option>
        }
    </InputSelect>
    <br />
    @if (_chosedDeviceID <= 0)
    {
        <Button Disabled Color="ButtonColor.Primary" Type="ButtonType.Submit">Generate link QrCode</Button>
    }
    else
    {
        <Button Color="ButtonColor.Primary" Type="ButtonType.Submit">Generate link QrCode</Button>
    }
</EditForm>
<br />
<br />
<h5>Create Wifi Sharing Qr Code</h5>
<EditForm Context="editWifiContext" OnSubmit="HandleWifiSharingQrCode">
    <DataAnnotationsValidator />
    <div>
        <label class="form-check-label" for="wifiName">
            Wifi Name
        </label>
        <InputText id="wifiName" @bind-Value="wifiModel.WifiName"></InputText>
        <ValidationMessage For="() => wifiModel.WifiName" class="text-danger d-block" />
    </div>
    <div>
        <label class="form-check-label" for="wifiPassword">
            Wifi Pasword
        </label>
        <InputText type="@TxtType" name="password" id="wifiPassword" @bind-Value="wifiModel.WifiPassword"></InputText>
        <span class="e-input-eye" @onclick="ShowPassword"><i class="@changedClass" style="font-size: 1.2rem; color: black;"></i></span>

        <ValidationMessage For="() => wifiModel.WifiPassword" class="text-danger d-block" />
    </div>

    <br />
    <Button Color="ButtonColor.Primary" Type="ButtonType.Submit">Create Wifi Qr Code</Button>
</EditForm>

<style>
    bi.bi-eye:before {
    content: '\e345';
    font-family: e-icons;
    font-size: 13px;
    }

</style>
@code {
    private DeviceProfile _selectedDeviceProfile { get; set; } = new();
    private WifiModel wifiModel = new();
    private EditContext editWifiContext;
    [Parameter]
    public int _chosedDeviceID { get; set; }
    [Parameter]
    public UserProfile currentUser { get; set; } = new();
    bool valid;

    public class WifiModel
    {
        private string _wifiName = "";
        [Required(ErrorMessage = "Wifi Name is mandatory")]
        [MinLength(4)]
        public string WifiName
        {
            get { return _wifiName; }
            set { _wifiName = value; }
        }

        private string _wifiPassword = "";
        [Required(ErrorMessage = "Password is mandatory")]
        [MinLength(8)]
        public string WifiPassword
        {
            get { return _wifiPassword; }
            set { _wifiPassword = value; }
        }
    }

    public string TxtType = "password";
    public string changedClass = "bi bi-eye-slash";
    public void ShowPassword()
    {
        if (this.TxtType == "password")
        {
            this.TxtType = "text";
            changedClass = "bi bi-eye";
        }
        else
        {
            this.TxtType = "password";
            changedClass = "bi bi-eye-slash";
        }
    }

    private void SetSelectedDeviceProfile(int deviceID)
    {
        _selectedDeviceProfile = DataService.GetDeviceById(deviceID);
    }


    private async Task HandleQrCode(EditContext editContext)
    {
        _selectedDeviceProfile = DataService.GetDeviceById(_chosedDeviceID);
        Directory.CreateDirectory($"{Environment.CurrentDirectory}\\files\\{currentUser.UserID}\\qrCodes");
        string filePath = $"{Environment.CurrentDirectory}\\files\\{currentUser.UserID}\\qrCodes\\DeviceID{_selectedDeviceProfile.DeviceID.ToString()}.png";
        Logic.CreateQrCodeLinkToDevice(_selectedDeviceProfile.DeviceID.ToString(), currentUser.UserID.ToString(), filePath);
        var file = Path.GetFileName(filePath);
        string fileUrl = $"files/{currentUser.UserID}/qrCodes/{file}";
        await JSRuntime.InvokeVoidAsync("open", fileUrl, "_blank");
        _chosedDeviceID = new();
        StateHasChanged();
    }

    private async void HandleWifiSharingQrCode(EditContext editWifiContext)
    {
        Directory.CreateDirectory($"{Environment.CurrentDirectory}\\files\\{currentUser.UserID}\\WifiQrCode");
        string filePath = $"{Environment.CurrentDirectory}\\files\\{currentUser.UserID}\\WifiQrCode\\Wifi.png";
        valid = editWifiContext.Validate();
        currentUser = DataService.CurrentUser;
        if (valid == true)
        {
            valid = editWifiContext.Validate();
            Logic.CreateWifiSharingQrCode(wifiModel.WifiName, wifiModel.WifiPassword, filePath);
            var file = Path.GetFileName(filePath);
            string fileUrl = $"files/{currentUser.UserID}/WifiQrCode/{file}";
            await JSRuntime.InvokeVoidAsync("open", fileUrl, "_blank");
        }
        else
        {
            return;
        }
        wifiModel = new();
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        currentUser = DataService.CurrentUser;
        editWifiContext = new(wifiModel);
        base.OnInitializedAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            editWifiContext.Validate();
    }

}
