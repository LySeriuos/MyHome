@page "/QrCoder"

@using MyHome.Models;
@using MyHome;
@using MyHomeBlazorApp.Pages
@using System.ComponentModel.DataAnnotations
@using static QRCoder.PayloadGenerator
@inject BlazorData.DataService DataService


<h3>QrCoder</h3>

<p>@_chosedDeviceID</p>
<p>@_selectedDeviceProfile.DeviceID</p>


<h5>Generate link to Device QrCode </h5>

<EditForm Model="@_selectedDeviceProfile" Context="editDeviceContext" OnSubmit="HandleQrCode">
    <label class="form-label">Choose Device</label>
    <InputSelect @bind-Value="_chosedDeviceID">
        <option selected disabled value="-1">Select Device...</option>
        @foreach (var device in DataService.CurrentUser.GetAllDevices())
        {
            <option value="@device.DeviceID">@device.DeviceName</option>
        }
    </InputSelect>
    <Button Color="ButtonColor.Primary" Type="ButtonType.Submit">Generate link QrCode</Button>
</EditForm>
<br />
<br />
<h5>Create Wifi Sharing Qr Code</h5>
<EditForm Model="wifiModel" Context="editWifiContext" OnSubmit="HandleWifiSharingQrCode">
    <DataAnnotationsValidator />
    <div>
        <label class="form-check-label" for="wifiName">
            Wifi Name
        </label>
        <InputText id="wifiName" @bind-Value="wifiModel.WifiName"></InputText>
        <ValidationMessage For="() => wifiModel.WifiName" class="text-danger d-block" />
    </div>
    <div>
        <label class="form-check-label" for="wifiPassword">
            Wifi Pasword
        </label>
        <InputText type="password" name="password" id="wifiPassword" @bind-Value="wifiModel.WifiPassword"></InputText>
        <span class=""><i class="bi bi-eye" style="font-size: 1.2rem; color: black;"></i></span>
        
        <ValidationMessage For="() => wifiModel.WifiPassword" class="text-danger d-block" />
    </div>

    <br />
    <Button Color="ButtonColor.Primary" Type="ButtonType.Submit">Create Wifi Qr Code</Button>
</EditForm>
@code {
    private DeviceProfile _selectedDeviceProfile { get; set; } = new();
    private WifiModel wifiModel = new();
    private EditContext editDeviceContext;
    private EditContext editWifiContext;
    [Parameter]
    public int _chosedDeviceID { get; set; }
    [Parameter]
    public UserProfile currentUser { get; set; } = new();
    private string deviceID { get; set; } = String.Empty;
    private string savedQRCodeLink = "C:\\Users\\shiranco.DESKTOP-HRN41TE\\Desktop\\qrcodes\\qrCode.png";
    bool valid;

    public class WifiModel
    {

        private string _wifiName = "";
        [Required(ErrorMessage = "Wifi Name is mandatory")]
        [MinLength(4)]
        public string WifiName
        {
            get { return _wifiName; }
            set { _wifiName = value; }
        }

        private string _wifiPassword = "";
        [Required(ErrorMessage = "Password is mandatory")]
        [MinLength(8)]
        public string WifiPassword
        {
            get { return _wifiPassword; }
            set { _wifiPassword = value; }
        }
    }

    private void SetSelectedDeviceProfile(int deviceID)
    {
        _selectedDeviceProfile = DataService.GetDeviceById(deviceID);
    }


    private void HandleQrCode(EditContext editContext)
    {
        _selectedDeviceProfile = DataService.GetDeviceById(_chosedDeviceID);
        currentUser = DataService.CurrentUser;
        // string QrCodeUrl = $"files/{DataService.CurrentUser.UserID}/{file}";
        Logic.CreateQrCodeLinkToDevice(_selectedDeviceProfile.DeviceID.ToString(), currentUser.UserID.ToString(), savedQRCodeLink);
    }

    private void HandleWifiSharingQrCode(EditContext editWifiContext)
    {
        valid = editWifiContext.Validate();

        if (valid == true)
        {
            valid = editWifiContext.Validate();
            Logic.CreateWifiSharingQrCode(wifiModel.WifiName, wifiModel.WifiPassword, savedQRCodeLink);
        }
        else
        {
            return;
        }
    }



    protected override void OnInitialized()
    {
        WifiModel wifiModel = new();
        editWifiContext = new(wifiModel);
        base.OnInitializedAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            editWifiContext.Validate();
    }

}
