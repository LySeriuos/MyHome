@page "/userManagement"
@using Microsoft.AspNetCore.Components.QuickGrid
@using MyHomeBlazorApp.BlazorData
@inject UserManager<MyHomeBlazorAppUser> UserManager
@inject SignInManager<MyHomeBlazorAppUser> SignInManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject MyHomeBlazorAppContext dbcontext;
@using Microsoft.AspNetCore.Components.Authorization;
<h3>UserManagement</h3>

@* 1.Show all user list  *@
@* 2. Find user by email, when typing in search bar *@
@* 3. Buttons connect as user, send reset pasword email for user email, add as admin, remove user, change role from admin to user*@
@* @inject DataSurcoe Data *@

<div class="grid" tabindex="-1">
    <QuickGrid Items="@FilteredNames.AsQueryable()" Virtualize="true" @ref="grid">
        <PropertyColumn Title="User Email" Property="@(u => u.NormalizedEmail)" Sortable="true" IsDefaultSortColumn="true">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="nameSearch" @bind:event="oninput" placeholder="User Email..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <TemplateColumn Title="UserRole">
            @UserRole(context).Result.ToString()
        </TemplateColumn>
        <TemplateColumn Title="Change Role">
            <Button Class="btn btn-outline-info" @onclick="ChangeUserRole">Change Role</Button>
        </TemplateColumn>
        <TemplateColumn Title="Delete User">
            <Button Class="btn btn-outline-danger">Delete User</Button>
        </TemplateColumn>
        <TemplateColumn Title="Login As User">
            <Button Class="btn btn-outline-primary">Login as this User</Button>
        </TemplateColumn>
        <TemplateColumn Title="Password Reset">
            <Button Class="btn btn-outline-dark">Send password reset</Button>
        </TemplateColumn>
    </QuickGrid>
</div>

<div class="my-2">
    <div class="search-box inline-block mr-4 my-1">
        <input type="search" autofocus @bind="nameSearch" @bind:event="oninput" @bind:after="()=>grid.RefreshDataAsync()" placeholder="Product name..." />
    </div>

    <div class="inline-block my-1">
        Total: <strong>@FilteredNames.Count() Names found</strong>
    </div>
</div>


<EditForm Model="@userRoles">
    <InputSelect @bind-Value="dbcontext.UserRoles">
        <option>Select Role</option>
        @foreach(var role in dbcontext.Roles)
        {
            <option value="@role.Name">@role.Name</option>
        }
    </InputSelect>
</EditForm>



@code
{
    QuickGrid<MyHomeBlazorAppUser>? grid;
    String? userRole { get; set; }
    private string refUserRole { get; set; }
    string nameSearch = "";
    private MyHomeBlazorAppUser userRoles { get; set; } = new();
    private EditContext editContext;
    private List<MyHomeBlazorAppUser> _users { get; set; }
    private string? roleName;
    List<MyHomeBlazorAppUser> userRolesss { get; set; }
    List<MyHomeBlazorAppUser> FilteredNames => _users.Where(
    u => u.Email.ToLower().Contains(nameSearch.ToLower())).ToList();

    private async Task<string> UserRole(MyHomeBlazorAppUser user)
    {
        var userRoles = await UserManager.GetRolesAsync(user);
        roleName = userRoles.FirstOrDefault();
        return roleName.ToString();
    }

    //app user should have only one Role, but if error and user have more than one so this method will remove "User" role.
    private async Task RemoveUserRole()
    {
        foreach (var userFromDB in _users)
        {
            var userRoles = await UserManager.GetRolesAsync(userFromDB);
            if (userRoles.Count > 1)
            {
                await UserManager.RemoveFromRoleAsync(userFromDB, "User");
                await UserManager.UpdateAsync(userFromDB);
            }
        }
    }

    private void ChangeUserRole()
    {

    }


    protected override void OnInitialized()
    {
        _users = UserManager.Users.ToList();
        editContext = new(userRoles);
    }
}

