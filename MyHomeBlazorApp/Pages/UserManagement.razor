@page "/userManagement"
@using Microsoft.AspNetCore.Components.QuickGrid
@using MyHomeBlazorApp.BlazorData
@inject UserManager<MyHomeBlazorAppUser> UserManager
@inject SignInManager<MyHomeBlazorAppUser> SignInManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject MyHomeBlazorAppContext dbcontext;
@using Microsoft.AspNetCore.Components.Authorization;
<h3>UserManagement</h3>

@* 1.Show all user list  *@
@* 2. Find user by email, when typing in search bar *@
@* 3. Buttons connect as user, send reset pasword email for user email, add as admin, remove user, change role from admin to user*@
@* @inject DataSurcoe Data *@

<div class="grid" tabindex="-1">
    <QuickGrid Items="@_users.AsQueryable()" Virtualize="true" @ref="grid">
        <PropertyColumn Title="User Email" Property="@(u => u.NormalizedEmail)" Sortable="true" IsDefaultSortColumn="true">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="nameSearch" @bind:event="oninput" placeholder="User Email..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Title="User Name" Property="@(u => u.NormalizedUserName)" Sortable="true" />
        <TemplateColumn Title="UserRole">
            @* @dbcontext.UserRoles.Where(x => x.UserId == context.Id).FirstOrDefault(); *@
            @* @SignInManager.UserManager.GetRolesAsync(context).Result.ToString(); *@
            @UserRole(context);
        </TemplateColumn>
        @* <TemplateColumn Title="End" SortBy="@marketingEndSort">
            @context.MarketingEnd?.ToShortDateString()
        </TemplateColumn@* > *@
        <PropertyColumn Title="User Role" Property="@(u => u)" Sortable="true" />
    </QuickGrid>
</div>

<div class="my-2">
    <div class="search-box inline-block mr-4 my-1">
        <input type="search" autofocus @bind="nameSearch" @bind:event="oninput" @bind:after="()=>grid.RefreshDataAsync()" placeholder="Product name..." />
    </div>

    <div class="inline-block my-1">
        Total: <strong>@numResults results found</strong>
    </div>
</div>


@code
{

    QuickGrid<MyHomeBlazorAppUser>? grid;
    GridItemsProvider<MyHomeBlazorAppUser>? usersFromDB;
    private string? userRole;
    int numResults;
    string nameSearch;
    private List<MyHomeBlazorAppUser>? _users { get; set; }
    GridSort<MyHomeBlazorAppUser> marketingStartSort = GridSort<MyHomeBlazorAppUser>.ByAscending(x => x.Email);
    GridSort<MyHomeBlazorAppUser> marketingEndSort = GridSort<MyHomeBlazorAppUser>.ByAscending(x => x.Email);
    private MyHomeBlazorAppContext _dbcontext;
    private string roleName;
    private string UserRole(MyHomeBlazorAppUser context)
    {
        var userRoles = dbcontext.UserRoles;
        var userRole = userRoles.FirstOrDefault();
        var roles = dbcontext.Roles;
        foreach (var role in roles)
        {
            if (userRole.RoleId == role.Id)
            {
                roleName = role.Name;
                break;
            }
        }
        return roleName;
    }

    private async Task GetUsersWithData()
    {
        var users = _dbcontext.Users;
        var userRoles = dbcontext.UserRoles;
        var userRole = userRoles.FirstOrDefault();
        var bla = _dbcontext.Roles.Where(r => r.Id == userRole.RoleId);
        var roleName = bla.ToString();
    }

    protected override async Task OnInitializedAsync()
    {
        var usersFromDB = dbcontext.Users;
        _users = UserManager.Users.ToList();
        // var bla = dbcontext.Roles.Where(r => r.Id == userRole.RoleId).Select(r=>r.Name);
        // var roleName = bla.ToString();
        _dbcontext = dbcontext;
        // itemsProvider = async request =>
        // {
        //     var result = dbcontext.Users;

        //     // Separately display the item count
        //     if (result.TotalItemCount != numResults && !request.CancellationToken.IsCancellationRequested)
        //     {
        //         numResults = result.TotalItemCount;
        //         StateHasChanged();
        //     }

        //     return result;
        // };
    }
}
