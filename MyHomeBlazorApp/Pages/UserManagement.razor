@page "/userManagement"
@using Microsoft.AspNetCore.Components.QuickGrid
@using MyHomeBlazorApp.BlazorData
@inject UserManager<MyHomeBlazorAppUser> UserManager
@inject SignInManager<MyHomeBlazorAppUser> SignInManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject MyHomeBlazorAppContext dbcontext;
@using Microsoft.AspNetCore.Components.Authorization;
<h3>UserManagement</h3>

@* 1.Show all user list  *@
@* 2. Find user by email, when typing in search bar *@
@* 3. Buttons connect as user, send reset pasword email for user email, add as admin, remove user, change role from admin to user*@
@* @inject DataSurcoe Data *@

<div class="grid" tabindex="-1">
    <QuickGrid Items="@_users.AsQueryable()" Virtualize="true" @ref="grid">
        <PropertyColumn Title="User Email" Property="@(u => u.NormalizedEmail)" Sortable="true" IsDefaultSortColumn="true">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="nameSearch" @bind:event="oninput" placeholder="User Email..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Title="User ID" Property="@(u => u.Id)" Sortable="true" />
        <TemplateColumn Title="UserRole">
            @UserRole(context).Result.ToString()
        </TemplateColumn>
        @* <TemplateColumn Title="End" SortBy="@marketingEndSort">
            @context.MarketingEnd?.ToShortDateString()
        </TemplateColumn@* > *@
        <PropertyColumn Title="Default" Property="@(u => u)" Sortable="true" />
    </QuickGrid>
</div>

<div class="my-2">
    <div class="search-box inline-block mr-4 my-1">
        <input type="search" autofocus @bind="nameSearch" @bind:event="oninput" @bind:after="()=>grid.RefreshDataAsync()" placeholder="Product name..." />
    </div>

    <div class="inline-block my-1">
        Total: <strong>@numResults results found</strong>
    </div>
</div>


@code
{

    QuickGrid<MyHomeBlazorAppUser>? grid;
    GridItemsProvider<MyHomeBlazorAppUser>? usersFromDB;
    String? userRole { get; set; }

    // private string? userRole;
    int numResults;
    string nameSearch;
    private List<MyHomeBlazorAppUser> _users { get; set; }
    private MyHomeBlazorAppContext _dbcontext;
    private string? roleName;

    private async Task<string> UserRole(MyHomeBlazorAppUser user)
    {
        var userRoles = await UserManager.GetRolesAsync(user);
        roleName = userRoles.FirstOrDefault();
        return roleName.ToString();
    }
    // private async Task<string> UserRole(MyHomeBlazorAppUser user)
    // {
    //     bool userIsInRole = await UserManager.IsInRoleAsync(user, "User");
    //     bool userIsInAdminRole = await UserManager.IsInRoleAsync(user, "Admin");
        
    //     if (userIsInRole || userIsInAdminRole)
    //     {
    //         //if user has two roles it is printing the right one only because the Admin role goes second, but it is wrong, need to fix it
    //         var userRoles = await UserManager.GetRolesAsync(user);
    //         foreach (var role in userRoles)
    //         {
    //             if (role == "User")
    //             {
    //                 userRole = "User";
    //             }
    //             if (role == "Admin")
    //             {
    //                 userRole = "Admin";
    //             }
    //         }
    //     }
    //     else
    //     {
    //         await UserManager.AddToRoleAsync(user, "User");
    //     }

    //     return userRole;
    // }
    //app user should have only one Role, but if error and user have more than one so this method will remove "User" role.
    private async Task RemoveUserRole()
    {
        foreach (var userFromDB in _users)
        {
            var userRoles = await UserManager.GetRolesAsync(userFromDB);
            if (userRoles.Count > 1)
            {
                await UserManager.RemoveFromRoleAsync(userFromDB, "User");
                await UserManager.UpdateAsync(userFromDB);
            }
        }        
    }

    
    protected override void OnInitialized()
    {
        var usersFromDB = dbcontext.Users;
        _users = UserManager.Users.ToList();
        
        // usersFromDB = async request =>
        // {
        //     var result = await _users;

        //     // Separately display the item count
        //     if (result.TotalItemCount != numResults && !request.CancellationToken.IsCancellationRequested)
        //     {
        //         numResults = result.TotalItemCount;
        //         StateHasChanged();
        //     }

        //     return result;
        // };
    }
}
