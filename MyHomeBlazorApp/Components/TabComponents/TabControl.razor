@using BlazorBootstrap

<style>
    .joinBtn {
        align-items: center;
        background-color: #e9f3f7;
        border: solid transparent;
        border-radius: 16px;
        box-sizing: border-box;
        color: #525051;
        cursor: pointer;
        display: inline-flex;
        font-family: -apple-system, system-ui, system-ui, "Segoe UI", Roboto, "Helvetica Neue", "Fira Sans", Ubuntu, Oxygen, "Oxygen Sans", Cantarell, "Droid Sans", "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Lucida Grande", Helvetica, Arial, sans-serif;
        font-size: 1.2rem;
        font-weight: 600;
        justify-content: center;
        line-height: 20px;
        max-width: 480px;
        min-height: 40px;
        min-width: 0px;
        overflow: hidden;
        padding: 0px;
        padding-left: 20px;
        padding-right: 20px;
        text-align: center;
        touch-action: manipulation;
        transition: background-color 0.167s cubic-bezier(0.4, 0, 0.2, 1) 0s, box-shadow 0.167s cubic-bezier(0.4, 0, 0.2, 1) 0s, color 0.167s cubic-bezier(0.4, 0, 0.2, 1) 0s;
        user-select: none;
        -webkit-user-select: none;
        vertical-align: middle;
    }

        .joinBtn:after {
            background-clip: padding-box;
            background-color: #f1e1d8;
            border: solid transparent;
            border-radius: 16px;
            border-width: 0 0 4px;
            bottom: -4px;
            content: "";
            left: 0;
            position: absolute;
            right: 0;
            top: 0;
            z-index: -1;
        }

       .joinBtn:focus, .btn:focus {
            /* background-color: #16437E; */
            color: #ffffff;
            border: none;
            box-shadow: none;
        }

         .joinBtn:focus, .joinBtn:active:focus, .btn:focus {
            /* background: #09223b; */
            color: rgb(255, 255, 255, .7);
            border: none;
            box-shadow: none;
        }

       .joinBtn:hover {
            /* background-color: #16437E; */
            color: #9ab4c4;
            border: 0px;
        }

        .joinBtn:disabled {
            cursor: not-allowed;
            background: rgba(0, 0, 0, .08);
            color: rgba(0, 0, 0, .3);
        }
</style>
<CascadingValue Value="this">
    <div class="btn-group h4" role="group">
        @foreach (TabPage tabPage in Pages)
        {
            <button type="button"
                    class="btn @GetButtonClass(tabPage)"
                    @onclick=@( () => ActivatePage(tabPage) )>
                @tabPage.Text
            </button>
        }
    </div>
    @ChildContent
</CascadingValue>

@code {
    // Next line is needed so we are able to add <TabPage> components inside
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    public TabPage? ActivePage { get; set; }
    List<TabPage> Pages = new List<TabPage>();

    [Parameter]
    public int? TabID { get; set; }


    internal void AddPage(TabPage tabPage)
    {
        Pages.Add(tabPage);
        if (Pages.Count == 1)
        {           
            ActivePage = tabPage;
        }
        else if (TabID != 0 && Pages.Count == 4)
        {
            if (TabID == 1)
            {
                ActivePage = Pages[0];
            }
            else if (TabID == 2)
            {
                ActivePage = Pages[1];
            }
            else if (TabID == 3)
            {
                ActivePage = Pages[2];
            }
            else if (TabID == 4)
            {
                ActivePage = Pages[3];
            }
            else
            {
                throw new ArgumentException("Invalid Tab ID");
            }
        }
        StateHasChanged();
    }

    string GetButtonClass(TabPage page)
    {
        return page == ActivePage ? "joinBtn" : "joinBtn";
    }

    void ActivatePage(TabPage page)
    {
        ActivePage = page;
    }
}

