@using MyHomeBlazorApp.BlazorData
@using MyHome.Models;
@using MyHome;
@using MyHomeBlazorApp.Components.Modals
@using MyHomeBlazorApp.Pages
@using MyHomeBlazorApp.Shared
@using System.Reflection
@using MyHomeBlazorApp.Components
@inject BlazorData.DataService DataService
@inject IJSRuntime JSRuntime


<EditForm @ref="refAddEditDeviceTest" EditContext="@editContext" id="refAddEditDeviceTest" OnSubmit="DeviceFormSubmitted" @oninput="OnInput">
    <DataAnnotationsValidator />
    <div class="form-group row">
        <label for="deviceName" class="col-sm-4 col-form-label">
            Name
        </label>
        <div class="col-sm-8">
            <InputText id="deviceName" @bind-Value="CurrentDevice.DeviceName" placeholder="Device Name" />
        </div>
        <ValidationMessage For=@( () => CurrentDevice.DeviceName ) />
    </div>
    <div class="form-group row">
        <label for="deviceProduser" class="col-sm-4 col-form-label">
            Produser
        </label>
        <div class="col-sm-8">
            <InputText id="deviceProduser" @bind-Value="CurrentDevice.DeviceProduser" placeholder="Device Produser" />
        </div>
    </div>
    <div class="form-group row">
        <label for="deviceType" class="col-sm-4 col-form-label">Type</label>
        <div class="col-sm-8">
            <InputSelect id="deviceType" @bind-Value="CurrentDevice.DeviceType" placeholder="Device Type">
                @foreach (var type in Enum.GetValues(typeof(DeviceType)))
                {
                    <option value="@type">@type</option>
                }
            </InputSelect>
        </div>
    </div>
    <div class="form-group row">
        <label for="deviceSerialNumber" class="col-sm-4 col-form-label">
            Serial Number
        </label>
        <div class="col-sm-8">
            <InputText id="deviceSerialNumber" @bind-Value="CurrentDevice.DeviceSerialNumber" placeholder="Device Serial Number"/>
        </div>
    </div>
    <div class="form-group row">
        <label for="deviceModelNumber" class="col-sm-4 col-form-label">
            Model Number
        </label>
        <div class="col-sm-8">
            <InputText id="deviceModelNumber" @bind-Value="CurrentDevice.DeviceModelNumber" placeholder="Device Model Number" />
        </div>
    </div>
    <div class="form-group row">
        <label for="deviceIpAddress" class="col-sm-4 col-form-label">
            IP Address
        </label>
        <div class="col-sm-8">
            <InputText id="deviceIpAddress" @bind-Value="CurrentDevice.IpAddress" placeholder="Device Ip Address" />
        </div>
    </div>
    <div class="form-group row">
        <label for="deviceMacAddress" class="col-sm-4 col-form-label">
            Mac Address
        </label>
        <div class="col-sm-8">
            <InputText id="deviceMacAddress" @bind-Value="CurrentDevice.MacAdrress" placeholder="Mac Address" />
        </div>
    </div>
    <div class="form-group row">
        <label for="deviceManualBookLink" class="col-sm-4 col-form-label">
            Manual Link
        </label>
        <div class="col-sm-8">
            <Button class="btn-sm btn btn-outline-info" @onclick="() => DataService.Navigate(CurrentDevice.DeviceID, JSRuntime)">Manual</Button>
        </div>
    </div>
    <div class="row">
        <div class="form-group">
            @* ////// *@
            @* There is no option to edit unassigned device without moving to other RealEstate *@
            @* /////// *@
            <label class="form-label">Choose Real Estate</label>
            <InputSelect @bind-Value="_chosedRealEstateID" class="form-select" @bind-Value:after="RealEsatateIdToAddDeviceChanged">
                <option selected value="0" disabled>Select Real Estate...</option>
                @foreach (var realEstate in CurrentUser.RealEstates)
                {
                    <option value="@realEstate.RealEstateID">@realEstate.RealEstateName</option>
                }
            </InputSelect>
            <ValidationMessage For="() => _chosedRealEstateID" class="text-danger d-block" />
        </div>
    </div>
    @if (showErrorMessageVisible == true)
    {
        <p class="text-danger d-block">@errorMessage</p>
    }
    <br>
    @if (CurrentDevice.DeviceID != 0)
    {
        <NextPreviuosButtons @bind-CurrentDevice="@CurrentDevice"
        DevicesListAsQueryable="_devicesListAsQueryable">
        </NextPreviuosButtons>
    }
    else if (_unassignedDevicesListAsQueryable.Count() > 1)
    {
        <NextPreviuosButtons @bind-CurrentDevice="@CurrentDevice"
        DevicesListAsQueryable="_unassignedDevicesListAsQueryable">
        </NextPreviuosButtons>
    }
    @if (IncludeButtons)
    {
        @if (fieldHasBeenChanged == true)
        {
            <Button Color="ButtonColor.Primary" Type="ButtonType.Submit">Save changes</Button>
        }
        else
        {
            <Button Color="ButtonColor.Primary" Disabled Type="ButtonType.Submit">Save changes</Button>
        }
    }
</EditForm>
<div>
    <SuccessModal @ref="_refSuccessModal" Title="Add/Edit Confirmation"></SuccessModal>
</div>

@code {

    [Parameter]
    public DeviceProfile CurrentDevice { get; set; } = new();
    [Parameter]
    public UserProfile CurrentUser { get; set; } = new();
    [Parameter]
    public EditForm refAddEditDeviceTest { get; set; } = new();
    [CascadingParameter]
    public CustomReusableModal Parent { get; set; }    
    [Parameter]
    public EventCallback DataChangedEvent { get; set; }
    private IQueryable<DeviceProfile>? _devicesListAsQueryable { get; set; }
    private IQueryable<DeviceProfile>? _unassignedDevicesListAsQueryable { get; set; }
    private EditContext? editContext { get; set; }
    private int _chosedRealEstateID { get; set; } = new();
    private SuccessModal _refSuccessModal = default!;
    private string? errorMessage;
    private bool chosedRealEstateIsValid;
    private bool IncludeButtons { get; set; } = true;
    private bool deviceIsAssignedToRealEstate;
    private bool validDeviceForm;
    private bool showErrorMessageVisible = false;
    private bool fieldHasBeenChanged { get; set; } = false;
    protected override void OnInitialized()
    {
        Init();
        base.OnInitialized();
    }

    private void OnInput()
    {
        fieldHasBeenChanged = true;
    }

    //todo: disable button if there is no changes in the editForm
    private void Init()
    {
        _chosedRealEstateID = DataService.GetRealEstateByDeviceID(CurrentDevice.DeviceID);
        editContext = new(CurrentDevice);
        _unassignedDevicesListAsQueryable = DataService.UnassignedDevicesList.AsQueryable();
        _devicesListAsQueryable = DataService.GetDbUserDeviceProfileWithWarrantyShopAddressData()
        .Result.UserProfile.RealEstates
        .SelectMany(realEstate => realEstate.DevicesProfiles)
        .OrderBy(d => DataService.GetRealEstateByDeviceID(d.DeviceID))
        .ThenBy(d => d.DeviceID).AsQueryable();
    }

    public void Save()
    {
        if (editContext != null)
        {
            DeviceFormSubmitted(editContext);
        }
    }

    protected override void OnParametersSet()
    {
        if (Parent != null)
        {
            IncludeButtons = false;
            Parent.SaveDataChanges = Save;
        }
        base.OnParametersSet();
    }

    private void RealEsatateIdToAddDeviceChanged()
    {
        if (_chosedRealEstateID != 0)
        {
            showErrorMessageVisible = false;
        }
        else
        {
            showErrorMessageVisible = true;
        }
    }

    private bool CheckIfCurrentDeviceIsAssignedToRealEstate()
    {
        int realEstateId = DataService.GetRealEstateByDeviceID(CurrentDevice.DeviceID);
        if (realEstateId > 0)
        {
            // throw new InvalidOperationException("Something went wrong, this device shouldn't be assigned to the Real Estate");
            deviceIsAssignedToRealEstate = true;
        }
        else
        {
            deviceIsAssignedToRealEstate = false;
        }
        return deviceIsAssignedToRealEstate;
    }

    private bool ChosedRealEstateIsValid()
    {
        if (_chosedRealEstateID == 0)
        {
            chosedRealEstateIsValid = false;
            showErrorMessageVisible = true;
            validDeviceForm = false;
            errorMessage = "Please select Real Estate to Add Device";
        }
        else
        {
            chosedRealEstateIsValid = true;
            showErrorMessageVisible = false;
        }
        return chosedRealEstateIsValid;
    }

    private async Task DeviceFormSubmitted(EditContext editContext)
    {
        validDeviceForm = editContext.Validate();
        ChosedRealEstateIsValid();
        CheckIfCurrentDeviceIsAssignedToRealEstate();

        if (validDeviceForm != true)
        {
            validDeviceForm = editContext.Validate();
            return;
        }

        if (CurrentDevice.DeviceID == 0 && validDeviceForm == true)
        {
            // DataService.AddNewDevice(CurrentDevice, _chosedRealEstateID);
            DataService.AddNewDeviceToDataBase(CurrentDevice, _chosedRealEstateID);
            _chosedRealEstateID = 0;
        }
        else if (CurrentDevice.DeviceID != 0 & chosedRealEstateIsValid == true & deviceIsAssignedToRealEstate == false)
        {
            DataService.MoveDeviceFromUnassignedDevicesProfile(CurrentUser, _chosedRealEstateID, CurrentDevice);
        }
        else if (CurrentDevice.DeviceID != 0 & chosedRealEstateIsValid == true & deviceIsAssignedToRealEstate == true)
        {
            DataService.MoveDeviceToOtherRealEstate(CurrentDevice.DeviceID, CurrentUser, _chosedRealEstateID);
        }

        DataService.SaveUpdatedObject();
        await DataChangedEvent.InvokeAsync();
        fieldHasBeenChanged = false;
        showErrorMessageVisible = false;
        if (Parent != null)
        {
            await Parent.HideAsync();
        }
    }
}
