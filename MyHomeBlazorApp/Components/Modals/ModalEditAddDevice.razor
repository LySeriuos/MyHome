@using MyHome.Models;
@using MyHome;
@using MyHomeBlazorApp.Pages
@inject BlazorData.DataService DataService



<Modal @ref="refModalEditAddDevice" Title="Edit Device Details">
    <BodyTemplate>
        @* <AddEditDeviceComponent Device="@CurrentDevice" EditContext="@editDeviceContext"/> *@
        <EditForm Model="@CurrentDevice" OnSubmit="DeviceFormSubmitted">
            <DataAnnotationsValidator />
            <div class="form-group row">
                <label for="deviceName" class="col-sm-4 col-form-label">
                    Name
                </label>
                <div class="col-sm-8">
                    <InputText id="deviceName" @bind-Value="CurrentDevice.DeviceName" placeholder="Device Name" />
                </div>
                <ValidationMessage For=@( () => CurrentDevice.DeviceName ) />
            </div>
            <div class="form-group row">
                <label for="deviceProduser" class="col-sm-4 col-form-label">
                    Produser
                </label>
                <div class="col-sm-8">
                    <InputText id="deviceProduser" @bind-Value="CurrentDevice.DeviceProduser" placeholder="Device Produser" />
                </div>
            </div>
            <div class="form-group row">
                <label for="deviceType" class="col-sm-4 col-form-label">Type</label>
                <div class="col-sm-8">
                    <InputSelect id="deviceType" @bind-Value="CurrentDevice.DeviceType" placeholder="Device Type">
                        @foreach (var type in Enum.GetValues(typeof(DeviceType)))
                        {
                            <option value="@type">@type</option>
                        }
                    </InputSelect>
                </div>
            </div>
            <div class="form-group row">
                <label for="deviceSerialNumber" class="col-sm-4 col-form-label">
                    Serial Number
                </label>
                <div class="col-sm-8">
                    <InputText id="deviceSerialNumber" @bind-Value="CurrentDevice.DeviceSerialNumber" placeholder="Device Serial Number" />
                </div>
            </div>
            <div class="form-group row">
                <label for="deviceModelNumber" class="col-sm-4 col-form-label">
                    Model Number
                </label>
                <div class="col-sm-8">
                    <InputText id="deviceModelNumber" @bind-Value="CurrentDevice.DeviceModelNumber" placeholder="Device Model Number" />
                </div>
            </div>
            <div class="form-group row">
                <label for="deviceIpAddress" class="col-sm-4 col-form-label">
                    IP Address
                </label>
                <div class="col-sm-8">
                    <InputText id="deviceIpAddress" @bind-Value="CurrentDevice.IpAddress" placeholder="Device Ip Address" />
                </div>
            </div>
            <div class="form-group row">
                <label for="deviceMacAddress" class="col-sm-4 col-form-label">
                    Mac Address
                </label>
                <div class="col-sm-8">
                    <InputText id="deviceMacAddress" @bind-Value="CurrentDevice.MacAdrress" placeholder="Mac Address" />
                </div>
            </div>
            <div class="form-group row">
                <label for="deviceManualBookLink" class="col-sm-4 col-form-label">
                    Manual Link
                </label>
                <div class="col-sm-8">
                    <InputText id="deviceManualBookLink" @bind-Value="CurrentDevice.ManualBookLink" placeholder="Device Manual Book Link" />
                </div>
            </div>
            <div class="row">
                <div class="form-group">
                    @* ////// *@
                    @* There is no option to edit unassigned device without moving to other RealEstate *@
                    @* /////// *@
                    <label class="form-label">Choose Real Estate</label>
                    <InputSelect @bind-Value="RealEsatateIdToAddDevice" class="form-select" @bind-Value:after="RealEsatateIdToAddDeviceChanged">
                        <option selected disabled>Select Real Estate...</option>
                        @foreach (var realEstate in CurrentUser.RealEstates)
                        {
                            <option value="@realEstate.RealEstateID">@realEstate.RealEstateName</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => realEstateToAddDevice.RealEstateID" class="text-danger d-block" />
                </div>
            </div>
            @if (showErrorMessageVisible == true)
            {
                <p class="text-danger d-block">@errorMessage</p>
            }
            <br>
            @if (CurrentDevice.DeviceID != 0)
            {
                <NextPreviuosButtons @bind-CurrentDevice="@CurrentDevice"
                                     DevicesListAsQueryable="_devicesListAsQueryable">
                </NextPreviuosButtons>
            }
            <Button style="margin:5px" Color="ButtonColor.Primary" @onclick="OnHideModalEditDeviceClick">Close</Button>
            <Button Color="ButtonColor.Primary" Type="ButtonType.Submit">Save changes</Button>
        </EditForm>
    </BodyTemplate>
</Modal>

@code {

    [Parameter]
    public DeviceProfile? CurrentDevice { get; set; }
    private IQueryable<DeviceProfile>? _devicesListAsQueryable { get; set; }
    [Parameter]
    public UserProfile? CurrentUser { get; set; }
    private EditContext? editContext;
    private Modal? refModalEditAddDevice { get; set; }
    private RealEstate realEstateToAddDevice { get; set; } = new();
    public Action? changedDeviceListData;
    private string? errorMessage;
    private bool RealEstateIdIsValid;
    private bool validDeviceForm;
    private bool showErrorMessageVisible = false;
    bool chosedRealEstateIsValid;
    [Parameter]
    public int RealEsatateIdToAddDevice
    {
        get => realEstateToAddDevice.RealEstateID;
        set { realEstateToAddDevice.RealEstateID = value; }
    }

    protected override void OnInitialized()
    {
        editContext = new(CurrentDevice);
        _devicesListAsQueryable = DataService.CurrentUser.RealEstates.SelectMany(realEstate => realEstate.DevicesProfiles).OrderBy(d => DataService.GetRealEstateByDeviceID(d.DeviceID)).ThenBy(d => d.DeviceID).AsQueryable();
        base.OnInitialized();
    }

    private void RealEsatateIdToAddDeviceChanged()
    {
        showErrorMessageVisible = false;
    }

    private bool CheckIfCurrentDeviceIsAssignedToRealEstate()
    {
        bool deviceIsAssignedToRealEstate;
        if (DataService.GetRealEstateByDeviceID(CurrentDevice.DeviceID) > 0)
        {
            deviceIsAssignedToRealEstate = true;
            throw new InvalidOperationException("Something went wrong, this device shouldn't be assigned to the Real Estate");
        }
        else
        {
            deviceIsAssignedToRealEstate = false;
        }
        return deviceIsAssignedToRealEstate;
    }

    private bool ChosedRealEstateIsValid()
    {
        if (RealEsatateIdToAddDevice == 0)
        {
            RealEstateIdIsValid = false;
            showErrorMessageVisible = true;
            errorMessage = "Please select Real Estate to Add Device";
        }
        else
        {
            RealEstateIdIsValid = true;
            showErrorMessageVisible = false;
        }
        return RealEstateIdIsValid;
    }

    private void DeviceFormSubmitted(EditContext editContext)
    {
        validDeviceForm = editContext.Validate();
        chosedRealEstateIsValid = ChosedRealEstateIsValid();
        if (CurrentDevice.DeviceID == 0)
        {            
            if (validDeviceForm != true && chosedRealEstateIsValid != true)
            {
                validDeviceForm = editContext.Validate();
                return;
            }
            else
            {
                validDeviceForm = editContext.Validate();
                DataService.AddNewDevice(CurrentDevice, RealEsatateIdToAddDevice);
            }
        }
        else if (CurrentDevice.DeviceID != 0 && chosedRealEstateIsValid == true)
        {
            CurrentUser.RealEstates.First(r => r.RealEstateID == RealEsatateIdToAddDevice).DevicesProfiles.Add(CurrentDevice);
            CurrentUser.UnassignedDevices.UnassignedDevicesList.Remove(CurrentDevice);
        }
        else 
        {
            DataService.SaveUpdatedObject();            
        }
        
        realEstateToAddDevice.RealEstateID = 0;
        showErrorMessageVisible = false;
        changedDeviceListData();
        refModalEditAddDevice.HideAsync();
        OnInitialized();        
    }

    // private void TestMethod()
    // {
    //     if (CurrentDevice.DeviceID == 0 && realEstateToAddDevice.RealEstateID == 0)
    //     {
    //         if (validDeviceForm != true)
    //         {
    //             validDeviceForm = editContext.Validate();
    //         }
    //         else
    //         {
    //             validDeviceForm = editContext.Validate();
    //             if (validDeviceForm == true && chosedRealEstateIsValid == true)
    //             {
    //                 DataService.AddNewDevice(CurrentDevice, RealEsatateIdToAddDevice);
    //                 changedDeviceListData();
    //                 realEstateToAddDevice.RealEstateID = 0;
    //                 refModalEditAddDevice.HideAsync();
    //             }
    //         }
    //     }
    //     else if (CurrentDevice.DeviceID != 0 && CheckIfCurrentDeviceIsAssignedToRealEstate() == false)
    //     {
    //         DataService.SaveUpdatedObject();
    //     }
    //     else if (CurrentDevice.DeviceID != 0 && realEstateToAddDevice.RealEstateID != 0)
    //     {
    //         DataService.SaveUpdatedObject();
    //     }
    // }
    public async Task OnHideModalEditDeviceClick()
    {
        await refModalEditAddDevice.HideAsync();
    }

    public async Task OnShowModalEditDeviceClick()
    {
        await refModalEditAddDevice.ShowAsync();
    }

}
