@using BlazorBootstrap
@inject BlazorData.DataService DataService
@using Microsoft.AspNetCore.Mvc
@using MyHome.Models
@using MyHomeBlazorApp.Components.Modals
@using System.Text


<Modal @ref="refModalEditWarrantyDetails" Title="Edit Warranty Details">
    <BodyTemplate>
        <EditForm Model="@CurrentDevice" Context="WarrantyDetails" OnSubmit="WarrantyDetailsFormSubmitted">
            <div class="form-group row">
                <label for="devicePurchaseDate" class="col-sm-6 col-form-label">Purchase Date</label>
                <div class="col-sm-6">
                    <InputDate ParsingErrorMessage="Must be a date" id="devicePurchaseDate" @bind-Value="CurrentDevice.DeviceWarranty.PurchaseDate">Add Purchase Date</InputDate>
                    <ValidationMessage For="@(() => CurrentDevice.DeviceWarranty.PurchaseDate)" />
                </div>
            </div>
            <div class="form-group row">
                <label for="deviceWarrantyLength" class="col-sm-6 col-form-label">Warranty Lentgh (years)</label>
                <div class="col-sm-6">
                    <InputNumber id="deviceWarrantyLength" @bind-Value="CurrentDevice.DeviceWarranty.Years">Add warranty lentgh in years</InputNumber>
                </div>
            </div>
            <div class="form-group row mb-5">
                <label for="linkToReceipt" class="col-sm-6 col-form-label">Receipt Link</label>
                <div class="col-sm-6">
                    @if (CurrentDevice.DeviceWarranty.ReceiptLink != null)
                    {
                        <p class="text-success">The receipt was uploaded.</p>
                    }
                    <InputFile id="WarrantyReceiptLink"
                               @bind-Value="CurrentDevice.DeviceWarranty.ReceiptLink"
                               OnChange="@UploadFiles">
                    </InputFile>
                </div>
            </div>
            <div class="form-group row">
                <label for="deviceExtendedWarrantyLength" class="col-sm-6 col-form-label">Extended warranty lentgh (years)</label>
                <div class="col-sm-6">
                    <InputNumber id="deviceExtendedWarrantyLength" @bind-Value="CurrentDevice.DeviceWarranty.ExtendedWarrantyinYears">Add extended warranty lentgh in years</InputNumber>
                </div>
            </div>
            <div class="form-group row mb-5">
                <label for="extendedWarrantyLinkToReceipt" class="col-sm-6 col-form-label">Extended Warranty Receipt</label>
                <div class="col-sm-6">
                    @if (CurrentDevice.DeviceWarranty.ExtraInsuranceWarrantyLink != null)
                    {
                        <p class="text-success">The receipt was uploaded.</p>
                    }
                    <InputFile id="extendedWarrantyLinkToReceipt"
                               @bind-Value="CurrentDevice.DeviceWarranty.ExtraInsuranceWarrantyLink"
                               OnChange="@UploadFiles">
                    </InputFile>
                </div>
            </div>

            @* <h3>Files</h3>
            @foreach (var url in FileUrls)
            {
            <li><a href="@url">@url</a><br /></li>
            } *@


            <NextPreviuosButtons @bind-CurrentDevice="@CurrentDevice"
                                 DevicesListAsQueryable="DevicesListAsQueryable">
            </NextPreviuosButtons>
            <Button Color="ButtonColor.Primary" @onclick="OnHideModalEditWarrantyClick">Close</Button>
            <Button Color="ButtonColor.Primary" Type="ButtonType.Submit">Save changes</Button>
        </EditForm>
        @if (errors.Count > 0)
        {
            <h2>Errors</h2>
            <ul class="text-danger">
                @foreach (string error in errors)
                {
                    <li>@error</li>
                }
            </ul>
        }
    </BodyTemplate>
</Modal>


@code {

    [Parameter]
    public DeviceProfile? CurrentDevice { get; set; }
    [Parameter]
    public IQueryable<DeviceProfile>? DevicesListAsQueryable { get; set; }
    public Action? WarrantyDataHasChanged;
    private Modal? refModalEditWarrantyDetails { get; set; }
    private IBrowserFile? file;
    // creating new Path for directory
    // readonly string receiptsHomePath = Path.Combine(homePath, "receipts");
    // 1024 bytes is 1 kb * 1024 is 1 KB. The file limit is 3 MB.
    private long maxFileSize = 1024 * 1024 * 3;
    private int maxAllowedFiles = 1;
    private List<string> errors = new();
    // creating new directory in user environmentenvironment
    // readonly static string homePath = (Environment.OSVersion.Platform == PlatformID.Unix ||
    //                Environment.OSVersion.Platform == PlatformID.MacOSX)
    // ? Environment.GetEnvironmentVariable("HOME")
    // : Environment.ExpandEnvironmentVariables("%HOMEDRIVE%%HOMEPATH%");



    private void UploadFiles(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

    private async Task<string> CaptureFile()
    {
        if (file is null)
        {
            // returns empty string if there is no file
            return "";
        }

        try
        {
            // string path = "wwwroot/files/data.jpg";
            string newFileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(file.Name));
            string userId = DataService.CurrentUser.UserID.ToString();
            // string deviceID = CurrentDevice.DeviceID.ToString();
            // string fileNameWithDeviceID = Path.Combine(deviceID, newFileName);
            Directory.CreateDirectory($"{Environment.CurrentDirectory}\\files\\{userId}");
            // string filePath = Path.Combine(receiptsHomePath, newFileName);
            string filePath = $"{Environment.CurrentDirectory}\\files\\{userId}\\{newFileName}";
            if (file.Size <= maxFileSize)
            {
                using var content = new MultipartFormDataContent();
                await using FileStream fs = new(filePath, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
                fs.Close();
            }
            else
            {
                errors.Add($"File: {file.Name} Error: The File has exceed file size{maxFileSize}");

            }

            await ListFiles();
            return filePath;
        }
        catch (Exception ex)
        {
            // TODO: for security reasons file.Name should be encoded or should remove all the special Characters and change the value for display
            errors.Add($"File: {file.Name} Error: {ex.Message}");
            throw;
        }

    }

    List<string> FileUrls = new();
    async Task ListFiles()
    {
        FileUrls.Clear();
        var files = Directory.GetFiles(Environment.CurrentDirectory + $"\\Files\\{DataService.CurrentUser.UserID}", "*.*");
        foreach (var filename in files)
        {
            var file = Path.GetFileName(filename);
            string url = $"files/{DataService.CurrentUser.UserID}/{file}";
            FileUrls.Add(url);
        }
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        await ListFiles();
    }

    public async Task OnShowModalEditWarrantyClick()
    {

        await refModalEditWarrantyDetails.ShowAsync();
    }

    public async Task OnHideModalEditWarrantyClick()
    {
        await refModalEditWarrantyDetails.HideAsync();
    }

    //if (String.IsNullOrEmpty(deviceToAddLink.DeviceWarranty.ExtraInsuranceWarrantyLink))
    // {
    //     deviceToAddLink.DeviceWarranty.ExtraInsuranceWarrantyLink = relativePath;
    // }
    async void WarrantyDetailsFormSubmitted(EditContext editcontext)
    {
        try
        {
            errors.Clear();
            DeviceProfile deviceToAddLink = DataService.Devices.First(d => d.DeviceID == CurrentDevice.DeviceID);
            string relativeFilePath = await CaptureFile();
            if (relativeFilePath != null || relativeFilePath != "")
            {
                if (deviceToAddLink.DeviceWarranty.ExtraInsuranceWarrantyLink != "" || deviceToAddLink.DeviceWarranty.ExtraInsuranceWarrantyLink != null)
                {
                    if (System.IO.File.Exists(deviceToAddLink.DeviceWarranty.ExtraInsuranceWarrantyLink))
                    {
                        System.IO.File.Delete(deviceToAddLink.DeviceWarranty.ExtraInsuranceWarrantyLink);
                    }
                    else
                    {
                        deviceToAddLink.DeviceWarranty.ExtraInsuranceWarrantyLink = "";
                    }
                }

                deviceToAddLink.DeviceWarranty.ExtraInsuranceWarrantyLink = relativeFilePath;

            }
            else
            {
                errors.Add($"Error: Something went wrong with this file!");
                return;
            }

            // if (deviceToAddLink.DeviceWarranty.ExtraInsuranceWarrantyLink == "" || deviceToAddLink.DeviceWarranty.ExtraInsuranceWarrantyLink == null)
            // {
            //     deviceToAddLink.DeviceWarranty.ExtraInsuranceWarrantyLink = relativeFilePath;

            // }
            // else if (deviceToAddLink.DeviceWarranty.ExtraInsuranceWarrantyLink != "" || deviceToAddLink.DeviceWarranty.ExtraInsuranceWarrantyLink != null)
            // {
            //     // delete file and add new
            //     {
            //         System.IO.File.Delete(deviceToAddLink.DeviceWarranty.ExtraInsuranceWarrantyLink);
            //         deviceToAddLink.DeviceWarranty.ExtraInsuranceWarrantyLink = relativeFilePath;
            //     }

            // }
            // else
            // {
            //     errors.Add($"Error: There is already uploaded file for this device!");
            //     return;
            // }

            DataService.SaveUpdatedObject();
            WarrantyDataHasChanged();
            refModalEditWarrantyDetails.HideAsync();

        }
        catch (Exception ex)
        {
            errors.Add($"Error: {ex.Message}");
            throw;
        }

    }
}

