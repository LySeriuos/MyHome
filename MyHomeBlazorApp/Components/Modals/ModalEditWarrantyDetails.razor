@using BlazorBootstrap
@inject BlazorData.DataService DataService
@using Microsoft.AspNetCore.Mvc
@using MyHome.Models
@using MyHomeBlazorApp.Components.Modals
@using System.Text


<Modal @ref="refModalEditWarrantyDetails" Title="Edit Warranty Details" OnHiding="OnModalHiding">
    <BodyTemplate>
        <EditForm Model="@CurrentDevice" Context="WarrantyDetails" OnSubmit="WarrantyDetailsFormSubmitted">
            <div class="form-group row">
                <label for="devicePurchaseDate" class="col-sm-6 col-form-label">Purchase Date</label>
                <div class="col-sm-6">
                    <InputDate ParsingErrorMessage="Must be a date" id="devicePurchaseDate" @bind-Value="CurrentDevice.DeviceWarranty.PurchaseDate">Add Purchase Date</InputDate>
                    <ValidationMessage For="@(() => CurrentDevice.DeviceWarranty.PurchaseDate)" />
                </div>
            </div>
            <div class="form-group row">
                <label for="deviceWarrantyLength" class="col-sm-6 col-form-label">Warranty Lentgh (years)</label>
                <div class="col-sm-6">
                    <InputNumber id="deviceWarrantyLength" @bind-Value="CurrentDevice.DeviceWarranty.Years">Add warranty lentgh in years</InputNumber>
                </div>
            </div>
            <div class="form-group row mb-5">
                <label for="linkToReceipt" class="col-sm-6 col-form-label">Receipt Link</label>
                <div class="col-sm-6">
                    @if (!String.IsNullOrEmpty(CurrentDevice.DeviceWarranty.ReceiptLink))
                    {
                        <p class="text-success">The receipt was uploaded.</p>
                    }
                    <InputFile @key=@(inputWarrantyFileId) id="WarrantyReceiptLink"
                               @bind-Value="CurrentDevice.DeviceWarranty.ReceiptLink"
                               OnChange="@LoadWarrantyFile">
                    </InputFile>
                </div>
                <div>
                    <p>@CurrentDevice.DeviceWarranty.ReceiptLink</p>
                </div>
            </div>
            <div class="form-group row">
                <label for="deviceExtendedWarrantyLength" class="col-sm-6 col-form-label">Extended warranty lentgh (years)</label>
                <div class="col-sm-6">
                    <InputNumber id="deviceExtendedWarrantyLength" @bind-Value="CurrentDevice.DeviceWarranty.ExtendedWarrantyinYears">Add extended warranty lentgh in years</InputNumber>
                </div>
            </div>
            <div class="form-group row mb-5">
                <label for="extendedWarrantyLinkToReceipt" class="col-sm-6 col-form-label">Extended Warranty Receipt</label>
                <div class="col-sm-6">
                    @if (!String.IsNullOrEmpty(CurrentDevice.DeviceWarranty.ExtraInsuranceWarrantyLink))
                    {
                        <p class="text-success">The receipt was uploaded.</p>
                    }
                    <InputFile @key=@(inputExtraWarrantyFileId) id="extendedWarrantyLinkToReceipt"
                               @bind-Value="CurrentDevice.DeviceWarranty.ExtraInsuranceWarrantyLink"
                               OnChange="@LoadExtraWarrantyFile">
                    </InputFile>
                </div>
            </div>

            <h3>Files</h3>
            <p>@FileUrls.Count()</p>
            @* @foreach (var url in FileUrls)
            {
            <li><a href="@url">@url</a><br /></li>
            } *@


            <NextPreviuosButtons @bind-CurrentDevice="@CurrentDevice"
                                 DevicesListAsQueryable="DevicesListAsQueryable">
            </NextPreviuosButtons>
            <Button Color="ButtonColor.Primary" @onclick="OnHideModalEditWarrantyClick">Close</Button>
            <Button Color="ButtonColor.Primary" Type="ButtonType.Submit">Save changes</Button>
        </EditForm>
        @if (errors.Count > 0)
        {
            <h2>Errors</h2>
            <ul class="text-danger">
                @foreach (string error in errors)
                {
                    <li>@error</li>
                }
            </ul>
        }
    </BodyTemplate>
</Modal>


@code {

    [Parameter]
    public DeviceProfile? CurrentDevice { get; set; }
    [Parameter]
    public IQueryable<DeviceProfile>? DevicesListAsQueryable { get; set; }
    public Action? WarrantyDataHasChanged;
    private Modal refModalEditWarrantyDetails { get; set; } = new();
    private IBrowserFile? warrantyReceiptFile;
    private IBrowserFile? extraWarrantyReceiptFile;
    private long maxFileSize = 1024 * 1024 * 3;
    private int maxAllowedFiles = 1;
    private List<string> errors = new();
    private Guid inputWarrantyFileId = Guid.NewGuid();
    private Guid inputExtraWarrantyFileId = Guid.NewGuid();

    //Some example
    // creating new directory in user environmentenvironment
    // readonly static string homePath = (Environment.OSVersion.Platform == PlatformID.Unix ||
    //                Environment.OSVersion.Platform == PlatformID.MacOSX)
    // ? Environment.GetEnvironmentVariable("HOME")
    // : Environment.ExpandEnvironmentVariables("%HOMEDRIVE%%HOMEPATH%");
        

    private void LoadExtraWarrantyFile(InputFileChangeEventArgs e)
    {
        extraWarrantyReceiptFile = e.File;
    }

    private void LoadWarrantyFile(InputFileChangeEventArgs f)
    {
        warrantyReceiptFile = f.File;
    }

    private async Task<string> CaptureFilePath(IBrowserFile file)
    {
        if (file is null)
        {
            // returns empty string if there is no file
            return "";
        }

        try
        {
            string newFileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(file.Name));
            string userId = DataService.CurrentUser.UserID.ToString();
            Directory.CreateDirectory($"{Environment.CurrentDirectory}\\files\\{userId}");
            string filePath = $"{Environment.CurrentDirectory}\\files\\{userId}\\{newFileName}";
            if (file.Size <= maxFileSize)
            {
                using var content = new MultipartFormDataContent();
                await using FileStream fs = new(filePath, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
                fs.Close();
            }
            else
            {
                errors.Add($"File: {file.Name} Error: The File has exceed file size{maxFileSize}");
            }
            return filePath;
        }
        catch (Exception ex)
        {
            // TODO: for security reasons file.Name should be encoded or should remove all the special Characters and change the value for display
            errors.Add($"File: {file.Name} Error: {ex.Message}");
            throw;
        }
    }

    public async Task OnShowModalEditWarrantyClick()
    {
        await refModalEditWarrantyDetails.ShowAsync();
    }

    public async Task OnHideModalEditWarrantyClick()
    {
        await refModalEditWarrantyDetails.HideAsync();
    }  

    private void DeleteFileIfExists(string filePath)
    {
        if (!String.IsNullOrEmpty(filePath))
        {
            if (System.IO.File.Exists(filePath))
            {
                System.IO.File.Delete(filePath);
            }
        }
        else
        {
            filePath = "";
        }
    }

    private async Task WarrantyDetailsFormSubmitted(EditContext editcontext)
    {
        try
        {
            errors.Clear();
            DeviceProfile deviceToAddLink = DataService.Devices.First(d => d.DeviceID == CurrentDevice.DeviceID);
            if (extraWarrantyReceiptFile != null)
            {
                DeleteFileIfExists(deviceToAddLink.DeviceWarranty.ExtraInsuranceWarrantyLink);
                string extraWarrantyReceiptFilePath = await CaptureFilePath(extraWarrantyReceiptFile);
                deviceToAddLink.DeviceWarranty.ExtraInsuranceWarrantyLink = extraWarrantyReceiptFilePath;

            }
            else
            {
                errors.Add($"Error: Something went wrong with this file!");
                return;
            }

            if (warrantyReceiptFile != null)
            {
                DeleteFileIfExists(deviceToAddLink.DeviceWarranty.ReceiptLink);
                string warrantyReceiptFilePath = await CaptureFilePath(warrantyReceiptFile);
                deviceToAddLink.DeviceWarranty.ReceiptLink = warrantyReceiptFilePath;
            }

            else
            {
                errors.Add($"Error: Something went wrong with this file!");
                return;
            }

            DataService.SaveUpdatedObject();
            WarrantyDataHasChanged();
            await refModalEditWarrantyDetails.HideAsync();

        }
        catch (Exception ex)
        {
            errors.Add($"Error: {ex.Message}");
            throw;
        }

    }
}

