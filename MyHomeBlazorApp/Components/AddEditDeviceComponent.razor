@using BlazorBootstrap
@inject BlazorData.DataService DataService
@using MyHome.Models


@* Model="@Device" *@
@* need to check before saving *@
<EditForm Model="@Device" OnSubmit="@DeviceFormSubmitted">
    <DataAnnotationsValidator />
    <div class="form-group row">
        <label for="deviceName" class="col-sm-4 col-form-label">
            Name
        </label>
        <div class="col-sm-8">
            <InputText id="deviceName" @bind-Value="Device.DeviceName" placeholder="Device Name" />
        </div>
        <ValidationSummary />
    </div>
    <div class="form-group row">
        <label for="deviceProduser" class="col-sm-4 col-form-label">
            Produser
        </label>
        <div class="col-sm-8">
            <InputText id="deviceProduser" @bind-Value="Device.DeviceProduser" placeholder="Device Produser" />
        </div>
    </div>    
    <div class="form-group row">
        <label for="deviceType" class="col-sm-4 col-form-label">Type</label>
        <div class="col-sm-8">
            <InputSelect id="deviceType" @bind-Value="Device.DeviceType" placeholder="Device Type">
                @foreach (var type in Enum.GetValues(typeof(DeviceType)))
                {
                    <option value="@type">@type</option>
                }
            </InputSelect>
        </div>
    </div>
    <div class="form-group row">
        <label for="deviceSerialNumber" class="col-sm-4 col-form-label">
            Serial Number
        </label>
        <div class="col-sm-8">
            <InputText id="deviceSerialNumber" @bind-Value="Device.DeviceSerialNumber" placeholder="Device Serial Number" />
        </div>
    </div>
    <div class="form-group row">
        <label for="deviceModelNumber" class="col-sm-4 col-form-label">
            Model Number
        </label>
        <div class="col-sm-8">
            <InputText id="deviceModelNumber" @bind-Value="Device.DeviceModelNumber" placeholder="Device Model Number" />
        </div>
    </div>
    <div class="form-group row">
        <label for="deviceIpAddress" class="col-sm-4 col-form-label">
            IP Address
        </label>
        <div class="col-sm-8">
            <InputText id="deviceIpAddress" @bind-Value="Device.IpAddress" placeholder="Device Ip Address" />
        </div>
    </div>
    <div class="form-group row">
        <label for="deviceMacAddress" class="col-sm-4 col-form-label">
            Mac Address
        </label>
        <div class="col-sm-8">
            <InputText id="deviceMacAddress" @bind-Value="Device.MacAdrress" placeholder="Mac Address" />
        </div>
    </div>
    <div class="form-group row">
        <label for="deviceManualBookLink" class="col-sm-4 col-form-label">
            Manual Link
        </label>
        <div class="col-sm-8">
            <InputText id="deviceManualBookLink" @bind-Value="Device.ManualBookLink" placeholder="Device Manual Book Link" />
        </div>
    </div>    
</EditForm>



@code {

    [Parameter]
    public DeviceProfile? Device { get; set; }
    [Parameter]
    public EventCallback Submition { get; set; }
    [Parameter]
    public EditContext editContext { get; set; }
    public bool DeviceFormIsValid;
    private bool validDevice;

    public void DeviceFormSubmitted(EditContext editContext)
    {
        validDevice = editContext.Validate();
        if (validDevice == true)
        {
            validDevice = editContext.Validate();
            DeviceFormIsValid = true;            
        }
        else
        {
            validDevice = editContext.Validate();
            DeviceFormIsValid = false;
        }

        ///////////////
        //Updating quickgrid only if I use OnInitialized, otherwise it rerender and change only if I change Tab or page.
        //QuickGrid for RealEstates Details do not need this, so I can imagine that the problem is in SelectMany, maybe? :)
        //////////////
        OnInitialized();
        
    }

    protected override void OnInitialized()
    {
        editContext = new(Device);
        // _devicesListAsQueryable = DataService.CurrentUser.RealEstates.SelectMany(realEstate => realEstate.DevicesProfiles).OrderBy(d => DataService.GetRealEstateByDeviceID(d.DeviceID)).ThenBy(d => d.DeviceID).AsQueryable();
        base.OnInitialized();
    }
}
