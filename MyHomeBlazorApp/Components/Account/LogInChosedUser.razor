@page "/Account/LoginChosedUser/{Id}"
@using Microsoft.AspNetCore.Components.QuickGrid
@using MyHomeBlazorApp.BlazorData
@inject UserManager<MyHomeBlazorAppUser> UserManager
@inject SignInManager<MyHomeBlazorAppUser> SignInManager
@inject AuthenticationStateProvider authenticationStateProvider
@inject MyHomeBlazorAppContext dbcontext
@inject NavigationManager NavManager
@inject IdentityRedirectManager RedirectManager

<h3>LogIn Chosed User</h3>

<Modal @ref="refWarningModal" Title="Warning!">
    <BodyTemplate>
        <p>You are Loged in as:</p>
        <ul>
            <li>
                User: @userToLogIn
            </li>
            <li>
                ID: @userToLogIn.Id
            </li>
        </ul>
        <p>Change to Admin requires Log Out from user and Login as Admin!</p>
        <Button Color="ButtonColor.Primary" @onclick="refWarningModal.HideAsync">Close</Button>
    </BodyTemplate>
</Modal>

@code {
    [Parameter]
    public string Id { get; set; }
    MyHomeBlazorAppUser? userToLogIn { get; set; } = new();
    Modal refWarningModal { get; set; } = default!;


    protected override async Task OnParametersSetAsync()
    {
        //TODO: implement check here if caller is actually admin!
        
        var AuthSate = authenticationStateProvider.GetAuthenticationStateAsync();
        var userCaller = AuthSate.Result.User;
        if (userCaller.IsInRole("Admin"))
        {
            userToLogIn = UserManager.Users.First(u => u.Id == Id);
            await SignInManager.SignInAsync(userToLogIn, false);
            NavManager.NavigateTo("/index/" + userToLogIn.Id, true);
        }
        else
        {   
            RedirectManager.RedirectTo("Account/Login");
        }
    }
}
